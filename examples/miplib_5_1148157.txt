
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (5, 5, 1.0, 5.0, 1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 151, 0.5877086347256995, 0.6470352347554423, 7.927)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 291, 0.5884046138899826, 0.6470352347554423, 11.199)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 443, 0.5891063708791929, 0.6409683874718972, 14.351)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 605, 0.5899297262123294, 0.6409683874718972, 17.559)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 731, 0.5922687400828551, 0.6266890655947764, 20.663)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 877, 0.5933417313107905, 0.6266890655947764, 23.739)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1029, 0.5947714946723073, 0.6266890655947764, 26.802)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1177, 0.5952241985357266, 0.6266890655947764, 29.903)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1329, 0.5955721215330968, 0.6266890655947764, 33.027)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1489, 0.5959148097544303, 0.6266890655947764, 36.141)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1653, 0.5963089751033068, 0.6266890655947764, 39.194)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1819, 0.5967915584545956, 0.6266890655947764, 42.295)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1987, 0.5974061838238869, 0.6266890655947764, 45.321)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2103, 0.5988583189945873, 0.6191624259723518, 48.287)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2233, 0.5992827624585708, 0.6191624259723518, 51.264)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2351, 0.5996735298142468, 0.6191624259723518, 54.298)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2463, 0.6001330147426007, 0.6191624259723518, 57.272)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2587, 0.6006488246348789, 0.6191624259723518, 60.18)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2721, 0.6014333679905924, 0.6191624259723518, 63.013)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2835, 0.6026119935748405, 0.6191624259723518, 65.718)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2963, 0.6036447676687878, 0.6191624259723518, 68.483)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3061, 0.6050427249864068, 0.6191624259723518, 71.196)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3169, 0.6058158710625077, 0.6191624259723518, 73.999)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3273, 0.6067261410134325, 0.6191624259723518, 76.807)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3371, 0.6073549121755479, 0.6191624259723518, 79.58)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3451, 0.6080451674137769, 0.6191624259723518, 82.376)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3537, 0.6086851506052692, 0.6191624259723518, 85.167)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3651, 0.6091677738404386, 0.6191624259723518, 87.999)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3745, 0.6099418783041133, 0.6191624259723518, 90.691)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3817, 0.6106517266844759, 0.6191624259723518, 93.405)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3897, 0.611224526560845, 0.6191624259723518, 96.181)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 4009, 0.6119255447360137, 0.6191624259723518, 99.011)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 4111, 0.6126674958496516, 0.6187669217816405, 101.929)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 4203, 0.6133862652359497, 0.6187669217816405, 104.658)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 4283, 0.6139469278797134, 0.6187669217816405, 107.384)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 4363, 0.6144617622277905, 0.6187669217816405, 110.123)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 4435, 0.6148636193008837, 0.6187669217816405, 112.911)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 4515, 0.6151924537726339, 0.6187669217816405, 115.721)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 4601, 0.6154301929315966, 0.6187669217816405, 118.555)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 4663, 0.6158168267277622, 0.6187669217816405, 121.341)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 4737, 0.6161554677007645, 0.6187669217816405, 124.126)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 4805, 0.616409123012268, 0.6187669217816405, 126.917)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 4857, 0.6167590665858939, 0.6187669217816405, 129.696)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 4911, 0.6170954760557149, 0.6187669217816405, 132.453)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 4965, 0.6173632802310413, 0.6187669217816405, 135.156)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 5009, 0.6175686591562872, 0.6187669217816405, 137.876)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 5043, 0.6178189482995169, 0.6187669217816405, 140.635)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 5071, 0.6181491521062455, 0.6187669217816405, 143.402)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 5091, 0.6183949013194079, 0.6187669217816405, 146.172)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 5123, 0.6186203054385906, 0.6187669217816405, 148.969)
