
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (5, 120, "integer")
seed = 5
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.2663432255185554, Inf, 4.844)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 0.8431810497434181, Inf, 7.023)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 14.644492066985057, Inf, 9.688)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 16.7739952658917, Inf, 12.881)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 995, 17.913905207337887, 42.81339765907523, 16.005)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1169, 18.817378536068283, 42.81339765907523, 19.128)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1333, 19.54161015792079, 42.81339765907523, 22.013)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1483, 20.357368185828836, 42.81339765907523, 24.913)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1643, 20.991798501377165, 42.81339765907523, 27.932)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1781, 21.589606882595856, 42.81339765907523, 30.723)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1921, 22.136644648629268, 42.81339765907523, 33.515)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2047, 22.470033888393697, 42.81339765907523, 36.266)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2199, 22.859781724076527, 42.81339765907523, 39.116)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2321, 23.294451806457133, 42.81339765907523, 41.968)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2447, 23.643655842509947, 42.81339765907523, 44.709)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2575, 23.963073656769687, 42.81339765907523, 47.453)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2693, 24.29313853155525, 42.81339765907523, 50.247)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2807, 24.70109904461557, 42.81339765907523, 52.884)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2931, 24.945065380654935, 42.81339765907523, 55.763)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3047, 25.283980309159862, 42.81339765907523, 58.331)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3163, 25.616355023073744, 42.81339765907523, 61.096)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3275, 25.8939224912528, 42.81339765907523, 63.63)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3383, 26.124671309023036, 42.81339765907523, 66.247)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3491, 26.329133409055466, 42.81339765907523, 68.646)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3595, 26.626086381605216, 42.81339765907523, 71.122)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3701, 26.87411120594035, 42.81339765907523, 73.705)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3805, 27.039072935106965, 42.81339765907523, 76.444)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3919, 27.277647866110367, 42.81339765907523, 79.051)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 4027, 27.50885040196203, 42.81339765907523, 81.442)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 4133, 27.62858848881807, 42.81339765907523, 83.871)
build optimizer
