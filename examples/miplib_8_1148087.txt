
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, ns) = (8, 70, 1.0)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -4034.5166820544277, Inf, 70.108)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -4034.505626055719, Inf, 130.486)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, -4034.5025610103144, Inf, 189.174)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, -4034.493624518364, Inf, 248.673)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, -4034.493268776843, Inf, 307.599)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, -4034.4863479007054, Inf, 368.392)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, -4034.482597116219, Inf, 427.58)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, -4034.47785396298, Inf, 487.722)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, -4034.4735364094745, Inf, 547.023)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, -4034.4719707045865, Inf, 605.69)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, -4034.470752732917, Inf, 664.141)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, -4034.464430167078, Inf, 725.137)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, -4034.4629557147837, Inf, 783.722)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, -4034.4608303185237, Inf, 843.073)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, -4034.458536389854, Inf, 902.266)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, -4034.4532655342305, Inf, 962.605)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, -4034.4513195022178, Inf, 1021.273)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, -4034.4502409364036, Inf, 1081.151)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, -4034.449333428012, Inf, 1139.17)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, -4034.4485195406032, Inf, 1197.178)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, -4034.4447708118855, Inf, 1256.833)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, -4034.443532407837, Inf, 1315.919)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, -4034.4413293173448, Inf, 1375.141)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4801, -4034.4405155646887, Inf, 1434.339)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 5001, -4034.437950315553, Inf, 1494.629)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5201, -4034.4372017761098, Inf, 1553.598)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5401, -4034.4370333552124, Inf, 1611.953)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5601, -4034.435551588091, Inf, 1672.205)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5801, -4034.4333079392095, Inf, 1732.198)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 6001, -4034.4319697074957, Inf, 1790.744)
