
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (1, 5, 1.0, 5.0, 1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 147, 0.6104113129925821, 0.6447880195168829, 4.422)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 265, 0.6133259645252812, 0.6388536918743769, 6.361)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 399, 0.6152386667701637, 0.6388536918743769, 8.229)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 539, 0.6166217454603694, 0.6388536918743769, 10.132)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 671, 0.6175851719988366, 0.6346725760434375, 12.02)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 797, 0.6191482646578459, 0.6346725760434375, 13.872)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 921, 0.6202064320249947, 0.6346725760434375, 15.72)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1053, 0.621122593517039, 0.6346725760434375, 17.59)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1171, 0.6219765681413125, 0.6346725760434375, 19.428)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1305, 0.6224412843647692, 0.6346725760434375, 21.322)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1431, 0.6232621940460085, 0.6346725760434375, 23.204)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1551, 0.6239885842280904, 0.6346725760434375, 25.075)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1675, 0.6243302192587695, 0.633054172689896, 26.948)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1791, 0.6247329376811329, 0.633054172689896, 28.842)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 1883, 0.6252004629717836, 0.633054172689896, 30.67)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 1975, 0.6256929466569222, 0.633054172689896, 32.503)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2071, 0.6260595287617895, 0.633054172689896, 34.291)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2181, 0.6263194999881809, 0.633054172689896, 36.179)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2271, 0.6267029040249691, 0.633054172689896, 37.999)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2377, 0.6270542648028761, 0.633054172689896, 39.853)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2479, 0.6272678596150163, 0.633054172689896, 41.706)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2573, 0.6275599846931426, 0.633054172689896, 43.528)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2663, 0.6277594827604055, 0.633054172689896, 45.339)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 2745, 0.6281006232387465, 0.633054172689896, 47.113)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 2849, 0.6284505933680761, 0.633054172689896, 48.972)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 2947, 0.6287811655405814, 0.633054172689896, 50.796)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3035, 0.6290300397995227, 0.633054172689896, 52.627)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3139, 0.62919877297366, 0.633054172689896, 54.473)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3227, 0.6294296446499582, 0.633054172689896, 56.272)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3321, 0.6295757681266109, 0.633054172689896, 58.114)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3421, 0.6299044148109156, 0.633054172689896, 59.924)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 3533, 0.6301287331892537, 0.633054172689896, 61.784)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 3631, 0.6304640813889253, 0.633054172689896, 63.579)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 3723, 0.6306473787515804, 0.633054172689896, 65.377)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 3795, 0.6308842004364017, 0.633054172689896, 67.126)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 3867, 0.6311280739552199, 0.633054172689896, 68.869)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 3939, 0.6313509744900243, 0.633054172689896, 70.654)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 4015, 0.6315508432264075, 0.633054172689896, 72.415)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 4093, 0.6318422235467608, 0.633054172689896, 74.205)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 4179, 0.6320869338178094, 0.633054172689896, 76.035)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 4255, 0.6323902414682727, 0.633054172689896, 77.861)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 4329, 0.6325429498526182, 0.633054172689896, 79.682)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 4371, 0.6328394196152777, 0.633054172689896, 81.504)
