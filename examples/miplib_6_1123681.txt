
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (6, 105, "integer")
seed = 6
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.4335262254296971, Inf, 2.556)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 2.5140784988274305, Inf, 3.534)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 5.555947620147162, Inf, 5.083)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 6.2472764925942625, Inf, 6.667)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 6.716102068619391, Inf, 8.277)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 7.164143302207493, Inf, 9.717)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 7.563203404673629, Inf, 11.134)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 7.974125077039716, Inf, 12.622)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1797, 8.20204613859971, 14.616088702657848, 13.979)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1915, 8.528643161390338, 14.616088702657848, 15.355)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2023, 8.842711612706164, 14.616088702657848, 16.736)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2125, 9.037985069753129, 14.616088702657848, 18.055)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2233, 9.225952146793196, 14.616088702657848, 19.309)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2337, 9.451239096858858, 14.616088702657848, 20.552)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2441, 9.616241300617807, 14.616088702657848, 21.794)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2541, 9.776141994668146, 14.616088702657848, 23.01)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2645, 9.915568807551413, 14.616088702657848, 24.193)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2749, 10.042435736358785, 14.616088702657848, 25.439)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2851, 10.225000536579628, 14.616088702657848, 26.81)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2951, 10.344649015763817, 14.616088702657848, 28.108)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3055, 10.438850574081826, 14.616088702657848, 29.346)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3157, 10.56890126026644, 14.616088702657848, 30.51)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3257, 10.67783197948606, 14.616088702657848, 31.704)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3357, 10.85589943505722, 14.616088702657848, 32.944)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3459, 10.977793092127529, 14.616088702657848, 34.117)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3559, 11.093581460900577, 14.616088702657848, 35.371)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3659, 11.155392031277913, 14.616088702657848, 36.544)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3759, 11.259702137603071, 14.616088702657848, 37.687)
build optimizer
