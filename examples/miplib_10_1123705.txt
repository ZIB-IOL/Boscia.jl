
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (10, 115, "integer")
seed = 10
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -1.040898695380559, Inf, 2.746)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -0.3180525101074592, Inf, 4.162)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 0.23382752049568611, Inf, 5.691)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 1.2433957788783387, Inf, 7.459)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 1.6531547675340759, Inf, 9.241)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 1.9057457265125968, Inf, 11.059)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 2.192664037107, Inf, 12.794)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 2.38388286672866, Inf, 14.492)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 2.556972504408646, Inf, 16.227)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 2.698672139848213, Inf, 17.828)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 2.8349746765802717, Inf, 19.586)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 2.9486662647633763, Inf, 21.358)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 3.037498194946986, Inf, 23.058)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 3.142557631259781, Inf, 24.716)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2995, 3.252845942715899, 10.325054239282657, 26.306)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3193, 3.3960334018255316, 10.325054239282657, 27.955)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3387, 3.4987528679871307, 10.325054239282657, 29.617)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3569, 3.611961068929307, 10.325054239282657, 31.211)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3751, 3.716203776252043, 10.325054239282657, 32.77)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3939, 3.7968337837350545, 10.325054239282657, 34.406)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4123, 3.877254211245355, 10.325054239282657, 36.103)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4295, 3.9662423821148396, 10.325054239282657, 37.667)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4473, 4.061048562373874, 10.325054239282657, 39.28)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4629, 4.138087947087664, 10.325054239282657, 40.758)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4795, 4.203842508766879, 10.325054239282657, 42.278)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4975, 4.2934950859089, 10.325054239282657, 43.905)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5109, 4.352850254295153, 7.928191378986495, 45.483)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5229, 4.415626773359941, 7.928191378986495, 47.046)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5353, 4.457126398519697, 7.928191378986495, 48.633)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5479, 4.535578677165902, 7.928191378986495, 50.209)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5597, 4.59547141666921, 7.928191378986495, 51.758)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5711, 4.642130275620557, 7.928191378986495, 53.269)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 5827, 4.7187864570053115, 7.928191378986495, 54.834)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 5939, 4.763981780978026, 7.928191378986495, 56.39)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6051, 4.799525569191221, 7.928191378986495, 57.969)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6167, 4.8514697566267575, 7.928191378986495, 59.513)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6287, 4.8971920887798515, 7.928191378986495, 61.047)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 6401, 4.949804252431976, 7.928191378986495, 62.765)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 6519, 4.991128276130013, 7.928191378986495, 64.325)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 6629, 5.040774873562849, 7.928191378986495, 65.901)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 6737, 5.085401301054782, 7.928191378986495, 67.405)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 6845, 5.122635498618634, 7.928191378986495, 69.052)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 6963, 5.167735466065641, 7.928191378986495, 70.683)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 7081, 5.208836960802008, 7.928191378986495, 72.313)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 7195, 5.247403645778027, 7.928191378986495, 73.952)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 7303, 5.280041630602662, 7.928191378986495, 75.505)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 7415, 5.322050012176359, 7.928191378986495, 77.088)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 7527, 5.373267647545146, 7.928191378986495, 78.711)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 7637, 5.4109154445969905, 7.928191378986495, 80.303)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 7743, 5.452156132284638, 7.928191378986495, 81.826)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 7851, 5.493698575182435, 7.928191378986495, 83.376)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 7959, 5.54510417770196, 7.928191378986495, 84.95)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 8067, 5.573307246168481, 7.928191378986495, 86.576)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5400, 8175, 5.609067334616871, 7.928191378986495, 88.158)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5500, 8283, 5.649691503567994, 7.928191378986495, 89.68)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5600, 8387, 5.679119035086909, 7.928191378986495, 91.171)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5700, 8487, 5.712152898301969, 7.928191378986495, 92.642)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5800, 8595, 5.732960001635838, 7.928191378986495, 94.218)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5900, 8697, 5.768041371299302, 7.928191378986495, 95.773)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6000, 8803, 5.799973555207623, 7.928191378986495, 97.458)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6100, 8911, 5.836321347732059, 7.928191378986495, 99.04)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6200, 9017, 5.866683678995612, 7.928191378986495, 100.608)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6300, 9121, 5.8861144362483095, 7.928191378986495, 102.287)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6400, 9227, 5.909812891230587, 7.928191378986495, 103.868)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6500, 9333, 5.928177904742224, 7.928191378986495, 105.375)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6600, 9439, 5.961641020282328, 7.928191378986495, 107.0)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6700, 9539, 5.989275439580069, 7.928191378986495, 108.617)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6800, 9641, 6.0172615245103716, 7.928191378986495, 110.219)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6900, 9743, 6.0393759640459415, 7.928191378986495, 111.765)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (7000, 9845, 6.06663328643322, 7.928191378986495, 113.335)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (7100, 9947, 6.096570544262449, 7.928191378986495, 114.959)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (7200, 10051, 6.124030196329055, 7.928191378986495, 116.538)
build optimizer
