
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (6, 20, 0.1, 20.0, 1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 0.6090738167731893, Inf, 37.675)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 0.6092517616350762, Inf, 77.362)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 0.60939414579938, Inf, 117.346)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 0.6094531676694839, Inf, 156.884)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 0.6095030399781398, Inf, 197.427)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 0.6095485084729652, Inf, 237.292)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 0.6095961231509358, Inf, 277.427)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 0.6096387597794363, Inf, 317.727)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 0.6096687617756302, Inf, 358.103)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 0.609691351545273, Inf, 398.822)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 0.6097169640972375, Inf, 439.389)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 0.6097334074013552, Inf, 480.811)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 0.6097559736515455, Inf, 521.514)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 0.6097776632832773, Inf, 562.416)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 0.609797593111731, Inf, 603.156)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 0.6098173359949485, Inf, 644.013)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 0.6098368967434683, Inf, 684.776)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, 0.6098587762916973, Inf, 726.209)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, 0.6098739009649545, Inf, 767.26)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, 0.6098883953101594, Inf, 808.716)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, 0.6099045105808862, Inf, 849.85)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, 0.6099176550408846, Inf, 890.886)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, 0.6099281856891366, Inf, 931.596)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4801, 0.6099406864144918, Inf, 972.516)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 5001, 0.6099512946159648, Inf, 1013.538)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5201, 0.6099617522668195, Inf, 1054.232)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5401, 0.6099752778790501, Inf, 1095.016)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5601, 0.6099876697465529, Inf, 1135.847)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5801, 0.6099988157689669, Inf, 1176.849)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 6001, 0.6100116256995526, Inf, 1217.625)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 6201, 0.6100259042147521, Inf, 1259.161)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 6401, 0.6100354512856345, Inf, 1299.841)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6601, 0.6100475904296295, Inf, 1340.732)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6801, 0.6100597287662289, Inf, 1381.708)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 7001, 0.61007005058006, Inf, 1422.537)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 7201, 0.6100809151596506, Inf, 1462.938)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 7401, 0.61009121419499, Inf, 1504.203)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7601, 0.6100974578148853, Inf, 1544.568)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7801, 0.61010679522671, Inf, 1585.414)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 8001, 0.6101159976766148, Inf, 1627.054)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 8201, 0.6101218016177112, Inf, 1668.377)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 8401, 0.6101295572559962, Inf, 1709.421)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 8601, 0.6101399439742203, Inf, 1750.439)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 8801, 0.6101465066168023, Inf, 1791.104)
