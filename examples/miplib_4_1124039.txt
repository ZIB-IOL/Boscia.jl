
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (4, 26)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 4.581585745328167, Inf, 5.693)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 4.636139172574417, Inf, 10.463)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 4.65086959849467, Inf, 15.627)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 4.6776761694469835, Inf, 20.746)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 4.694681443634549, Inf, 25.96)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 4.707128992237889, Inf, 31.387)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 4.72340558853615, Inf, 36.624)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 4.7340904181286145, Inf, 41.968)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 4.738501598474808, Inf, 47.683)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 4.748476930549309, Inf, 52.987)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 4.75985696088847, Inf, 58.234)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 4.765060913095524, Inf, 64.119)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 4.772786293247982, Inf, 69.859)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2775, 4.784367280238024, 5.079742773846213, 75.154)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2895, 4.790307313516666, 5.0786320831717084, 80.464)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3017, 4.796059512252931, 5.06610422075849, 85.797)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3137, 4.803795878660225, 5.06610422075849, 91.013)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3243, 4.807166004332877, 5.061595510134624, 96.464)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3347, 4.812031927776004, 5.061595510134624, 102.244)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3453, 4.814267236727705, 5.036456817865161, 107.828)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3557, 4.816485110449349, 5.036456817865161, 113.81)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3665, 4.82127272018022, 5.036456817865161, 119.479)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3779, 4.8278819332048615, 5.036456817865161, 124.963)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3883, 4.834247178120715, 5.036456817865161, 130.321)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3985, 4.836175868151502, 5.024284486390233, 135.464)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4085, 4.841746906960431, 5.024284486390233, 140.804)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4185, 4.845025495014935, 5.024284486390233, 146.206)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 4291, 4.8486195675812205, 5.024284486390233, 151.628)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 4395, 4.851063252051553, 5.024284486390233, 157.012)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 4499, 4.854621344980269, 5.024284486390233, 162.311)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 4611, 4.858679979722382, 5.024284486390233, 167.517)
(status, bnb_model.incumbent) = ("Optimal", 4.860195063131383)
