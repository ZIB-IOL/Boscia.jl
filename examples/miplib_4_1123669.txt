
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (4, 100, "integer")
seed = 4
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.39990848034829196, Inf, 2.486)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 3.786695820664587, Inf, 3.466)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 5.220594207667351, Inf, 5.015)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 5.970339504309132, Inf, 6.426)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 6.534078166489414, Inf, 7.832)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 7.152583910524444, Inf, 9.251)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 7.6143020054885815, Inf, 10.671)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 8.034775063353273, Inf, 11.984)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 8.538817446706867, Inf, 13.282)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 8.754581556614504, Inf, 14.582)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 8.997972970221708, Inf, 15.913)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 9.180114317211617, Inf, 17.179)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 9.467325807584801, Inf, 18.557)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2747, 9.668644437242637, 14.860306272528463, 19.846)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2855, 9.8700267664389, 14.860306272528463, 21.104)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2963, 10.04997341781528, 14.860306272528463, 22.295)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3069, 10.2300862905674, 14.860306272528463, 23.648)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3177, 10.4052915107252, 14.860306272528463, 24.911)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3277, 10.531015944736922, 14.860306272528463, 26.103)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3381, 10.64593535244745, 14.860306272528463, 27.33)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3487, 10.801777599708311, 14.860306272528463, 28.564)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3591, 10.914596094885898, 14.860306272528463, 29.739)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3695, 11.06513026819171, 14.860306272528463, 30.902)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3795, 11.244358073588025, 14.860306272528463, 32.062)
build optimizer
