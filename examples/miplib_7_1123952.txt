
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (7, 17)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 2.88266211088412, Inf, 4.705)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 2.960750651556603, Inf, 8.267)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 575, 2.9975016395280507, 3.170777948286455, 11.695)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 681, 3.0149684636325556, 3.138535858764673, 14.887)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 781, 3.025867509772876, 3.138535858764673, 18.075)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 883, 3.0327946992800436, 3.115305608638805, 21.403)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 985, 3.048437109887294, 3.115305608638805, 24.687)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1085, 3.059197421049667, 3.115305608638805, 28.113)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1185, 3.0657310282371197, 3.115305608638805, 31.435)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1285, 3.0736432309969013, 3.115305608638805, 34.744)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1381, 3.07982588528119, 3.115305608638805, 38.017)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1481, 3.084925264904651, 3.115305608638805, 41.45)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1575, 3.090154524158297, 3.115305608638805, 44.89)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1667, 3.0964517122419823, 3.115305608638805, 48.25)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 1751, 3.1000348672435036, 3.115305608638805, 51.553)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 1837, 3.1058850906693403, 3.115305608638805, 54.944)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 1915, 3.1085874510672453, 3.115305608638805, 58.328)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 1983, 3.113489713295666, 3.115305608638805, 61.721)
(status, bnb_model.incumbent) = ("Optimal", 3.115305608638805)
