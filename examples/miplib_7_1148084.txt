
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, ns) = (7, 70, 5.0)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -391.17213530267355, Inf, 52.295)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -391.1719637414682, Inf, 101.089)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, -391.1717582198523, Inf, 146.388)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 799, -391.1694699348469, -382.12980330788736, 192.559)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 999, -391.1690318793537, -382.12980330788736, 239.647)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1197, -391.16859046283076, -382.1357134746043, 286.074)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1397, -391.1685003920051, -382.1357134746043, 332.285)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1585, -391.1673716418824, -382.9779326204418, 379.89)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1783, -391.1669421952996, -382.9779326204418, 426.426)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1983, -391.1669126506023, -382.9779326204418, 471.922)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2181, -391.1666375706379, -382.9779326204418, 520.02)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2373, -391.1664177645328, -382.9779326204418, 567.299)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2551, -391.1646951619387, -382.99131165040126, 615.83)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2749, -391.1646151514976, -382.99131165040126, 663.291)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2947, -391.1645230350719, -382.99131165040126, 709.536)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3145, -391.1645085684583, -382.99131165040126, 755.824)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3339, -391.1643148319382, -382.99131165040126, 802.773)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3539, -391.1642414695335, -382.99131165040126, 848.378)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3735, -391.16417067624957, -382.99131165040126, 894.782)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3933, -391.164084249531, -382.99131165040126, 940.493)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4127, -391.1638463392069, -382.99131165040126, 986.942)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4319, -391.16383644415225, -382.99131165040126, 1033.538)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4515, -391.1636299692597, -382.99131165040126, 1079.601)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4701, -391.16343747403954, -383.3663183755602, 1129.527)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4875, -391.1628854687584, -383.3663183755602, 1180.185)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5013, -391.16182914839754, -383.4504447313623, 1233.549)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5177, -391.1608483026082, -383.4504447313623, 1285.19)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5373, -391.16082000270865, -383.4504447313623, 1332.47)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5563, -391.1605306824544, -383.4504447313623, 1379.268)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5761, -391.16048366435325, -383.4504447313623, 1425.733)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5955, -391.1604599856432, -383.4504447313623, 1473.001)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 6151, -391.16011728689097, -383.4504447313623, 1519.22)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6347, -391.16010779533104, -383.4504447313623, 1564.845)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6537, -391.1600457251361, -383.4504447313623, 1611.728)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6735, -391.1599970063552, -383.4504447313623, 1657.195)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6935, -391.15992395733116, -383.4504447313623, 1702.969)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 7135, -391.1598945729694, -383.4504447313623, 1748.266)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7325, -391.1598479056547, -383.4504447313623, 1794.404)
