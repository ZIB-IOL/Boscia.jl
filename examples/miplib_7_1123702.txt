
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (7, 115, "integer")
seed = 7
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.474174363905684, Inf, 2.715)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 0.4336726897840248, Inf, 3.854)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 599, 3.913043589900541, 17.962622262973493, 5.448)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 799, 4.856996156264866, 17.962622262973493, 7.259)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 999, 5.308007402047122, 17.962622262973493, 8.907)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1199, 5.831767245676597, 17.962622262973493, 10.603)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1397, 6.23783254850494, 17.962622262973493, 12.294)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1591, 6.595513425120278, 17.962622262973493, 13.932)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1783, 6.8429779744617445, 17.962622262973493, 15.504)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1973, 7.053259163517648, 17.962622262973493, 17.033)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2155, 7.2521472570642285, 17.962622262973493, 18.6)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2341, 7.505300001200576, 17.962622262973493, 20.156)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2519, 7.6686772851258205, 17.962622262973493, 21.701)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2695, 7.8477439284092565, 17.962622262973493, 23.251)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2859, 8.030209683651165, 17.962622262973493, 24.697)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3015, 8.240233262693495, 17.962622262973493, 26.162)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3185, 8.383798573760396, 17.962622262973493, 27.762)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3349, 8.515141469779579, 17.962622262973493, 29.266)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3511, 8.64579280107692, 17.962622262973493, 30.791)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3679, 8.751237576113395, 17.962622262973493, 32.361)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3843, 8.860253244410531, 17.962622262973493, 33.863)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3999, 8.97340957355172, 17.962622262973493, 35.372)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4153, 9.077847935285298, 17.962622262973493, 36.86)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4287, 9.176757114239027, 17.962622262973493, 38.248)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4447, 9.301727384775088, 17.962622262973493, 39.711)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4601, 9.400323156639532, 17.962622262973493, 41.213)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4739, 9.529286833190183, 17.962622262973493, 42.542)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 4881, 9.646197511050994, 17.962622262973493, 44.024)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5017, 9.748019217253082, 17.962622262973493, 45.475)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5159, 9.835773816450162, 17.962622262973493, 46.945)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5309, 9.89406009741336, 17.962622262973493, 48.444)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5455, 10.00001930789322, 17.962622262973493, 49.933)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 5609, 10.07023973533284, 17.962622262973493, 51.417)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 5739, 10.185688426141345, 17.962622262973493, 52.83)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 5869, 10.251810837385262, 17.962622262973493, 54.279)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6003, 10.319784089236594, 17.962622262973493, 55.773)
build optimizer
