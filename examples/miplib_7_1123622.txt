
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (7, 75, "integer")
seed = 7
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.27163754292525716, Inf, 2.064)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 2.0083527176030196, Inf, 3.024)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 2.640495740653803, Inf, 4.143)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 3.3319478446377144, Inf, 5.152)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 3.810487715307566, Inf, 6.271)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 4.207367377337316, Inf, 7.304)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1393, 4.533449541836992, 6.624210866480857, 8.323)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1493, 4.717425755548496, 6.624210866480857, 9.295)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1595, 4.9069953304912195, 6.624210866480857, 10.347)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1697, 5.134731664746092, 6.624210866480857, 11.301)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1797, 5.276064421727546, 6.624210866480857, 12.386)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1895, 5.419920321853008, 6.624210866480857, 13.352)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1993, 5.544195958146917, 6.624210866480857, 14.321)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2087, 5.661442815326221, 6.624210866480857, 15.387)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2179, 5.794281065247872, 6.624210866480857, 16.35)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2263, 5.900070045165894, 6.624210866480857, 17.332)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2355, 5.996420274690677, 6.624210866480857, 18.243)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2443, 6.105670823648296, 6.624210866480857, 19.221)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2531, 6.208775770893463, 6.624210866480857, 20.138)
build optimizer
