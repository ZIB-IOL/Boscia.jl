
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (2, 5, 1.0, 5.0, 5)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 147, 0.12673918142474377, 0.18717019820436287, 5.588)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 271, 0.13000514266274735, 0.18717019820436287, 8.117)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 393, 0.13230953731375134, 0.18717019820436287, 10.558)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 521, 0.13410739864420707, 0.15957586238384658, 12.974)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 641, 0.13551612565775603, 0.15957586238384658, 15.386)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 769, 0.13668892435777252, 0.15957586238384658, 17.77)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 901, 0.1378798910463242, 0.15957586238384658, 20.178)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1029, 0.13861483768843846, 0.15957586238384658, 22.563)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1145, 0.13934437543555234, 0.15957586238384658, 24.946)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1261, 0.14003561930141833, 0.15957586238384658, 27.297)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1371, 0.14077354059799657, 0.15957586238384658, 29.667)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1499, 0.14158346572962227, 0.15957586238384658, 32.076)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1613, 0.14269186464961128, 0.15957586238384658, 34.428)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1721, 0.1435859354445605, 0.15957586238384658, 36.793)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 1829, 0.14414455296115106, 0.15957586238384658, 39.095)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 1923, 0.1449738096312975, 0.15957586238384658, 41.438)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2009, 0.1457636158540841, 0.15957586238384658, 43.751)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2119, 0.14630171154798569, 0.15957586238384658, 46.13)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2231, 0.14683331129455385, 0.15957586238384658, 48.507)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2351, 0.14741158577214108, 0.15909911304409513, 50.845)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2463, 0.14775812529666854, 0.15909911304409513, 53.194)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2579, 0.14811556602409864, 0.15909911304409513, 55.547)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2671, 0.14858822189920046, 0.15909911304409513, 57.884)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 2789, 0.14896319010288103, 0.15909911304409513, 60.24)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 2887, 0.14934470889688278, 0.15909911304409513, 62.608)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3001, 0.14954068999432693, 0.15909911304409513, 64.967)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3115, 0.1498502202080218, 0.15909911304409513, 67.32)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3205, 0.15029212084364746, 0.15909911304409513, 69.671)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3309, 0.15085556393235, 0.15909911304409513, 71.979)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3415, 0.15132825125683042, 0.15909911304409513, 74.288)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3513, 0.15207313392258248, 0.15909911304409513, 76.562)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 3577, 0.15289463805237863, 0.15909911304409513, 78.83)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 3639, 0.15353209775793636, 0.15909911304409513, 81.119)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 3701, 0.15408864036483594, 0.15909911304409513, 83.374)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 3783, 0.15461273403799364, 0.15909911304409513, 85.659)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 3855, 0.15519148188271778, 0.15909911304409513, 87.89)
