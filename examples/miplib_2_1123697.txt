
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (2, 115, "integer")
seed = 2
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.40845186550431273, Inf, 2.721)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 1.3666731514987511, Inf, 3.823)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 10.771373824612855, Inf, 5.443)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 777, 12.437251834644975, 29.865382813609873, 7.266)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 945, 13.430519515931689, 29.865382813609873, 8.951)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1095, 14.042217747904738, 29.865382813609873, 10.655)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1247, 14.724211745768908, 29.865382813609873, 12.343)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1375, 15.308592148069492, 29.865382813609873, 13.921)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1511, 15.839072786169892, 29.865382813609873, 15.582)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1629, 16.215335881253917, 29.865382813609873, 17.117)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1743, 16.559486802845164, 29.865382813609873, 18.728)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1859, 17.03400788640639, 29.865382813609873, 20.197)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1965, 17.395374224652844, 29.865382813609873, 21.686)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2081, 17.776976194655578, 29.865382813609873, 23.181)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2187, 18.098541823409406, 29.865382813609873, 24.654)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2287, 18.476553636561498, 29.865382813609873, 26.126)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2393, 18.706030814379993, 29.865382813609873, 27.647)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2503, 19.139548605179723, 29.865382813609873, 29.064)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2609, 19.50799049602415, 29.865382813609873, 30.455)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2711, 19.882414542189693, 29.865382813609873, 31.925)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2817, 20.048076189507412, 29.865382813609873, 33.317)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2921, 20.27034051476194, 29.865382813609873, 34.796)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3027, 20.567456051165273, 29.865382813609873, 36.235)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3131, 20.81758537008226, 29.865382813609873, 37.637)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3233, 20.976045894751945, 29.865382813609873, 39.042)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3335, 21.180805425878976, 29.865382813609873, 40.447)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3439, 21.4284192499994, 29.865382813609873, 41.888)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3539, 21.649079569260596, 29.865382813609873, 43.269)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3641, 21.804239549022967, 29.865382813609873, 44.587)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3747, 21.985683092638844, 29.865382813609873, 45.97)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3851, 22.223222713876257, 29.865382813609873, 47.306)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 3951, 22.385212229464525, 29.865382813609873, 48.642)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 4053, 22.605450075663466, 29.865382813609873, 49.871)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 4157, 22.758881080580856, 29.865382813609873, 51.223)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 4261, 22.939340499820855, 29.865382813609873, 52.561)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 4363, 23.111438093089767, 29.865382813609873, 53.906)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 4463, 23.273479439761818, 29.865382813609873, 55.189)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 4531, 23.439774395033147, 23.62845009455348, 56.652)
build optimizer
