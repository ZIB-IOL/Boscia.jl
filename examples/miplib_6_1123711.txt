
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (6, 120, "integer")
seed = 6
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.5251102907403561, Inf, 2.803)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 0.13223514143881693, Inf, 4.004)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 3.13454335057015, Inf, 5.589)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 3.9279549301304484, Inf, 7.421)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 4.580521479797053, Inf, 9.331)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 4.974169047000813, Inf, 11.143)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 5.298660658991288, Inf, 12.993)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 5.537767567956206, Inf, 14.735)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 5.804350440241986, Inf, 16.433)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 6.047113382769809, Inf, 18.106)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 6.2742857499725515, Inf, 19.753)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 6.467524110382579, Inf, 21.477)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 6.648953022905009, Inf, 23.067)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 6.808701823269142, Inf, 24.693)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 6.9053089199709685, Inf, 26.227)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 7.053503671571912, Inf, 27.793)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 7.198285904559406, Inf, 29.387)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, 7.349946998799722, Inf, 30.991)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, 7.485127981668539, Inf, 32.595)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, 7.606507467703249, Inf, 34.226)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4173, 7.745441022259679, 14.891443041659592, 35.845)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4305, 7.825575099083674, 14.891443041659592, 37.366)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4429, 7.925888370288385, 14.891443041659592, 38.816)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4563, 8.033409215178795, 14.891443041659592, 40.334)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4693, 8.13067586359223, 14.891443041659592, 41.965)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4819, 8.229884690591975, 14.891443041659592, 43.43)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4947, 8.314653967107418, 14.891443041659592, 44.873)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5077, 8.398078135110651, 14.891443041659592, 46.413)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5205, 8.455175161197939, 14.891443041659592, 48.02)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5329, 8.518229603246162, 14.891443041659592, 49.52)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5451, 8.591301931916547, 14.891443041659592, 50.954)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5569, 8.683681393837794, 14.891443041659592, 52.471)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 5691, 8.759191576493398, 14.891443041659592, 54.034)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 5811, 8.830294345562292, 14.891443041659592, 55.56)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 5923, 8.884260156619725, 14.891443041659592, 57.028)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6031, 8.951237924384328, 14.891443041659592, 58.526)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6139, 9.004198932270892, 14.891443041659592, 59.913)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 6251, 9.061094070307432, 14.891443041659592, 61.437)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 6367, 9.119632525398774, 14.891443041659592, 62.878)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 6485, 9.186936387149421, 14.891443041659592, 64.34)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 6613, 9.251714196902105, 14.891443041659592, 65.822)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 6733, 9.314885870215381, 14.891443041659592, 67.342)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 6841, 9.369332376770984, 14.891443041659592, 68.743)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 6959, 9.426174310245285, 14.891443041659592, 70.132)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 7075, 9.487854763105592, 14.891443041659592, 71.602)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 7189, 9.554293976979581, 14.891443041659592, 73.097)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 7299, 9.613457957846968, 14.891443041659592, 74.536)
build optimizer
