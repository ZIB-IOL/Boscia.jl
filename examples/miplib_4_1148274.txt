
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (4, 20, 1.0, 20.0, 5)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 0.2319089813732465, Inf, 39.195)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 0.23195103440871084, Inf, 82.98)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 0.23197738365817736, Inf, 126.767)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 0.23199407300322417, Inf, 170.601)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 0.23201325040836682, Inf, 214.248)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 0.2320319034981781, Inf, 257.523)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 0.23205571321626337, Inf, 301.269)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 0.2320757973690108, Inf, 344.761)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 0.2320866633631452, Inf, 387.777)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 0.23210524242784253, Inf, 430.868)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 0.23212234608258467, Inf, 473.401)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 0.23214724601531606, Inf, 516.747)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 0.23216752641314564, Inf, 560.484)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 0.2321768341065811, Inf, 603.065)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 0.23218886446645076, Inf, 646.903)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 0.23220343610755398, Inf, 690.39)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 0.2322227264841683, Inf, 735.711)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3599, 0.23223510964741284, 0.3712082992402198, 779.757)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3799, 0.232245174123787, 0.3712082992402198, 823.265)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3999, 0.23225403473618125, 0.3712082992402198, 866.645)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4197, 0.23226550997681306, 0.3712082992402198, 910.153)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4397, 0.23227443169265072, 0.3712082992402198, 953.238)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4595, 0.232283268547758, 0.3712082992402198, 996.854)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4793, 0.23229596378059955, 0.3712082992402198, 1040.875)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4991, 0.23230423231655528, 0.3712082992402198, 1084.044)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5189, 0.23231390427709264, 0.3711081663846975, 1127.864)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5389, 0.23232340614128777, 0.3711081663846975, 1171.275)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5585, 0.23232973430539805, 0.36895758100592846, 1214.907)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5785, 0.23233681481559904, 0.36895758100592846, 1258.461)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5981, 0.23234252451457452, 0.36895758100592846, 1302.012)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 6181, 0.23234899955177435, 0.36895758100592846, 1345.461)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 6379, 0.23235920063229676, 0.36895758100592846, 1389.55)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6571, 0.23236665099307818, 0.36895758100592846, 1432.926)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6761, 0.23237430494636324, 0.36895758100592846, 1476.357)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6953, 0.2323795921463575, 0.36895758100592846, 1520.244)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 7151, 0.23238673862615147, 0.36895758100592846, 1563.799)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 7351, 0.23239299827979115, 0.36895758100592846, 1608.402)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7547, 0.23240098430913603, 0.36895758100592846, 1652.386)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7743, 0.23240382873581686, 0.36895758100592846, 1696.613)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 7941, 0.23241206475683507, 0.36895758100592846, 1740.406)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 8137, 0.23242132404760263, 0.36895758100592846, 1784.733)
