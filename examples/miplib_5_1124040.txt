
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (5, 26)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 5.621104283948595, Inf, 5.549)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 5.6683997982769085, Inf, 10.601)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 5.703480089889095, Inf, 15.68)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 5.73159608450695, Inf, 21.024)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 997, 5.7499146614463905, 6.085402176964576, 26.087)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1169, 5.760203927609627, 6.085402176964576, 31.145)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1289, 5.770985305169604, 5.992122851818123, 36.303)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1399, 5.779060500009008, 5.990204929881655, 41.299)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1507, 5.790472789259579, 5.990204929881655, 46.093)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1615, 5.797385189356141, 5.990204929881655, 51.539)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1721, 5.803256489743132, 5.990204929881655, 56.605)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1823, 5.809744033215443, 5.990204929881655, 61.591)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1925, 5.815649862232977, 5.990204929881655, 66.963)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2027, 5.825149217808021, 5.990204929881655, 71.935)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2127, 5.830955572601134, 5.990204929881655, 77.374)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2229, 5.836236746767326, 5.990204929881655, 82.481)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2329, 5.841340061612627, 5.990204929881655, 87.61)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2429, 5.846973279937618, 5.990204929881655, 92.974)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2529, 5.850871068824977, 5.990204929881655, 98.068)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2629, 5.853487039102167, 5.990204929881655, 103.25)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2729, 5.857605194857905, 5.990204929881655, 108.5)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2829, 5.86091787972923, 5.990204929881655, 114.116)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2929, 5.863935067726445, 5.990204929881655, 119.509)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3029, 5.8659274001612856, 5.990204929881655, 125.081)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3129, 5.869463318851996, 5.990204929881655, 130.44)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3231, 5.8731676917128395, 5.990204929881655, 135.664)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3331, 5.874492178240526, 5.990204929881655, 141.356)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3431, 5.875460203707471, 5.990204929881655, 147.021)
(status, bnb_model.incumbent) = ("Optimal", 5.8766371987232064)
