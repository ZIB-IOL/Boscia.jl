
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (2, 16)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 1.3023797141279594, Inf, 4.579)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 1.3358308511098789, Inf, 8.055)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 1.3656186246919864, Inf, 11.411)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 1.3796266817048446, Inf, 14.726)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 1.399662240698998, Inf, 18.081)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 1.4162900606937445, Inf, 21.454)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1391, 1.4222349831911312, 1.6350069511373047, 24.76)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1551, 1.43020929407342, 1.5897018546937551, 28.143)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1681, 1.4373974891788177, 1.5897018546937551, 31.576)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1803, 1.4438208007698392, 1.584893860452356, 34.797)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1929, 1.4503025323135554, 1.584893860452356, 38.051)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2039, 1.4531818068952278, 1.584893860452356, 41.526)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2143, 1.4566380232624687, 1.584893860452356, 44.752)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2255, 1.4592178438923005, 1.584893860452356, 48.203)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2371, 1.4634161203002887, 1.584893860452356, 51.436)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2471, 1.466209822278748, 1.5650810477277508, 54.744)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2575, 1.4690543641720506, 1.5377805987810413, 58.08)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2677, 1.4723602403485094, 1.5377805987810413, 61.503)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2777, 1.476155796793895, 1.5377805987810413, 64.853)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2877, 1.4790723972940765, 1.5377805987810413, 68.145)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2977, 1.4829789799191146, 1.5377805987810413, 71.642)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3077, 1.4846185691648797, 1.5377805987810413, 75.039)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3177, 1.487507982084688, 1.5377805987810413, 78.297)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3277, 1.490436131363957, 1.5377805987810413, 81.679)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3375, 1.4938124936569852, 1.5377805987810413, 85.016)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3467, 1.495133310041949, 1.5377805987810413, 88.351)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3565, 1.4977636635354026, 1.5377805987810413, 91.592)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3661, 1.499095447603162, 1.5377805987810413, 94.972)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3761, 1.500280900488631, 1.5377805987810413, 98.332)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3859, 1.5012988130867486, 1.5377805987810413, 101.734)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3953, 1.5031953416395765, 1.5377805987810413, 105.17)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 4051, 1.5045389614618772, 1.5377805987810413, 108.511)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 4145, 1.507075864805929, 1.5377805987810413, 111.863)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 4239, 1.5091414059598653, 1.5377805987810413, 115.282)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 4335, 1.5108826119723557, 1.5377805987810413, 118.648)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 4425, 1.5129884145999246, 1.5377805987810413, 122.107)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 4515, 1.5145950696078725, 1.5377805987810413, 125.621)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 4605, 1.515497919215973, 1.5377805987810413, 128.866)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 4699, 1.5172829880074674, 1.5377805987810413, 132.224)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 4785, 1.5185063279121156, 1.5377805987810413, 135.675)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 4869, 1.520164227315124, 1.5377805987810413, 139.027)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 4955, 1.5217327242590877, 1.5377805987810413, 142.278)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 5041, 1.5236876736239993, 1.5377805987810413, 145.566)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 5133, 1.525227917317663, 1.5377805987810413, 149.125)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 5219, 1.5264727255268715, 1.5377805987810413, 152.526)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 5315, 1.527201194783832, 1.5377805987810413, 156.134)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 5395, 1.52837879321793, 1.5377805987810413, 159.557)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 5479, 1.5295907881472766, 1.5377805987810413, 163.019)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 5553, 1.5309238703729575, 1.5377805987810413, 166.461)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 5623, 1.5325700358531265, 1.5377805987810413, 169.773)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 5703, 1.5335157832976647, 1.5377805987810413, 173.124)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 5769, 1.534980736517277, 1.5377805987810413, 176.485)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 5835, 1.537009524674316, 1.5377805987810413, 180.043)
(status, bnb_model.incumbent) = ("Optimal", 1.5377805987810413)
