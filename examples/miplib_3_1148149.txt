
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (3, 5, 1.0, 5.0, 1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 149, 0.6440398944452215, 0.6640853927040166, 6.45)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 289, 0.6460827102355153, 0.6622686080140774, 9.177)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 431, 0.6471983965071934, 0.6622686080140774, 11.739)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 569, 0.6484793353577012, 0.6622686080140774, 14.328)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 715, 0.649309713771805, 0.6622686080140774, 16.954)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 843, 0.6500853359859962, 0.6622686080140774, 19.454)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 969, 0.6507000526690252, 0.6622686080140774, 21.97)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1103, 0.6511744928368413, 0.6622686080140774, 24.299)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1233, 0.651694751544748, 0.6622686080140774, 26.622)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1371, 0.652013438943013, 0.6622686080140774, 28.944)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1509, 0.6524706767819957, 0.6622686080140774, 31.268)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1641, 0.6528366539471703, 0.6622686080140774, 33.588)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1783, 0.6531354051210103, 0.6622686080140774, 35.927)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1917, 0.6535430626508609, 0.6622686080140774, 38.251)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2049, 0.6538965583667333, 0.6622686080140774, 40.575)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2185, 0.6542752594841281, 0.6622686080140774, 42.916)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2319, 0.6546402824480975, 0.6622686080140774, 45.2)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2455, 0.6549313515578258, 0.6622686080140774, 47.534)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2587, 0.6552595069292289, 0.6622686080140774, 49.838)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2709, 0.6555872234337636, 0.6622686080140774, 52.082)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2823, 0.6558566525710142, 0.6622686080140774, 54.331)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2937, 0.6561832571971834, 0.6622686080140774, 56.574)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3057, 0.6564107996163229, 0.6622686080140774, 58.758)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3183, 0.6566501822900898, 0.6622686080140774, 60.94)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3295, 0.6568737294797069, 0.6622686080140774, 63.082)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3411, 0.6570924578064721, 0.6622686080140774, 65.251)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3531, 0.6572964078925055, 0.6622686080140774, 67.401)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3647, 0.6574376264571605, 0.6622686080140774, 69.563)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3769, 0.6576158729822225, 0.6622686080140774, 71.7)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3887, 0.6577901798822509, 0.6622686080140774, 73.864)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 4007, 0.6579041448949136, 0.6622686080140774, 76.016)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 4103, 0.6580895323530104, 0.6622686080140774, 78.157)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 4209, 0.6582820357761865, 0.6622686080140774, 80.334)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 4309, 0.6583828592247072, 0.6622686080140774, 82.481)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 4421, 0.6585071955369544, 0.6622686080140774, 84.675)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 4531, 0.658605479347265, 0.6622686080140774, 86.834)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 4627, 0.6587825231602075, 0.6622686080140774, 89.003)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 4735, 0.6588905008030993, 0.6622686080140774, 91.164)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 4833, 0.6590224530619226, 0.6622686080140774, 93.332)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 4945, 0.6590969764437932, 0.6622686080140774, 95.489)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 5053, 0.659256331021938, 0.6622686080140774, 97.677)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 5139, 0.6594105827331952, 0.6622686080140774, 99.819)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 5229, 0.6595114123740445, 0.6622686080140774, 101.999)
