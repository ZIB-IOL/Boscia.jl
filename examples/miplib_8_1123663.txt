
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (8, 95, "integer")
seed = 8
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.7325415576857248, Inf, 2.316)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 0.14693774624715789, Inf, 3.46)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 1.135871180697706, Inf, 4.811)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 1.6315632388734906, Inf, 6.208)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 2.0256599752965987, Inf, 7.582)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 2.3149992963395563, Inf, 8.827)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 2.547851433481369, Inf, 10.179)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 2.7586459877490555, Inf, 11.531)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 2.9063303025709737, Inf, 12.8)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 3.109924806467363, Inf, 14.045)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 3.2467868757044123, Inf, 15.282)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 3.34696900957315, Inf, 16.542)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 3.4590017974809157, Inf, 17.796)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 3.5568547560595287, Inf, 19.041)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 3.653068931503386, Inf, 20.366)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 3.709842519863751, Inf, 21.651)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3399, 3.8022738796053854, 8.668706141522819, 22.875)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3571, 3.8962685663634784, 8.668706141522819, 24.136)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3721, 3.982104824838169, 8.668706141522819, 25.325)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3873, 4.045882293770436, 8.668706141522819, 26.563)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4025, 4.110826193521784, 8.668706141522819, 27.775)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4181, 4.174411328548735, 8.668706141522819, 29.032)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4319, 4.254491699086622, 8.668706141522819, 30.21)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4475, 4.311325063203928, 8.668706141522819, 31.452)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4621, 4.388649562927987, 8.668706141522819, 32.625)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4769, 4.434327543492468, 8.668706141522819, 33.796)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4909, 4.48768468497434, 8.668706141522819, 34.983)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5047, 4.550105728031835, 8.668706141522819, 36.168)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5197, 4.600869467433804, 8.668706141522819, 37.412)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5335, 4.68334909384984, 8.668706141522819, 38.587)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5463, 4.760025030433298, 8.668706141522819, 39.716)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5597, 4.810726398727468, 8.668706141522819, 40.999)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 5733, 4.860288572239122, 8.668706141522819, 42.212)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 5859, 4.901283080368894, 8.668706141522819, 43.384)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6001, 4.947109730350211, 8.668706141522819, 44.64)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6147, 4.990301406880975, 8.668706141522819, 45.931)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6293, 5.036601988872584, 8.668706141522819, 47.181)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 6427, 5.100290930905374, 8.668706141522819, 48.436)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 6561, 5.136180891793112, 8.668706141522819, 49.673)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 6679, 5.175519038339705, 8.668706141522819, 50.836)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 6805, 5.223529221701409, 8.668706141522819, 52.104)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 6927, 5.254233978262403, 8.668706141522819, 53.26)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 7061, 5.288495706396288, 8.668706141522819, 54.368)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 7177, 5.328650222462864, 8.668706141522819, 55.562)
build optimizer
