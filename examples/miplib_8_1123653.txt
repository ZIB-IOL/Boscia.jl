
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (8, 90, "integer")
seed = 8
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 0.03591470469874058, Inf, 2.263)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 11.180531323774463, Inf, 3.204)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 13.953691836970526, Inf, 4.502)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 781, 16.06128828200324, 33.257149215000986, 5.664)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 933, 17.729628423818447, 33.257149215000986, 6.923)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1051, 18.65524634947158, 33.257149215000986, 8.1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1177, 19.380313226249843, 33.257149215000986, 9.287)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1287, 19.96075231937123, 33.257149215000986, 10.343)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1411, 20.7125357038853, 33.257149215000986, 11.49)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1533, 21.18517465849816, 33.257149215000986, 12.642)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1637, 21.580217004503407, 33.257149215000986, 13.668)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1739, 21.959777110653594, 33.257149215000986, 14.786)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1859, 22.495987641815145, 33.257149215000986, 15.934)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1975, 22.99406056440751, 33.257149215000986, 17.08)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2085, 23.47692686410018, 33.257149215000986, 18.141)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2195, 23.76924055255215, 33.257149215000986, 19.295)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2299, 24.204876628491945, 33.257149215000986, 20.391)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2407, 24.552310628328378, 33.257149215000986, 21.486)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2515, 24.80196695175013, 33.257149215000986, 22.62)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2619, 25.059955012712095, 33.257149215000986, 23.641)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2721, 25.288058354010655, 33.257149215000986, 24.667)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2827, 25.561834263689303, 33.257149215000986, 25.749)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2929, 25.814906597526647, 33.257149215000986, 26.803)
build optimizer
