
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, ns) = (7, 70, 10.0)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 199, -391.17213530267026, -380.3891214636985, 50.139)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 389, -391.17196374142725, -382.50148731749715, 98.714)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 581, -391.1717996357777, -382.52485284727624, 143.659)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 771, -391.1715907138941, -382.6739480398243, 188.726)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 953, -391.16925079376057, -382.6924838354874, 234.77)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1139, -391.1689569271339, -382.6924838354874, 280.469)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1323, -391.1685623529433, -382.6924838354874, 326.248)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1509, -391.1684943883638, -382.6924838354874, 372.076)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1701, -391.167370991435, -382.97794506602304, 417.704)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1893, -391.16694219319504, -382.97794506602304, 463.321)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2085, -391.1669126506201, -382.97794506602304, 507.602)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2265, -391.1668259290009, -382.97794506602304, 553.38)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2443, -391.16641823030886, -382.97794506602304, 599.198)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2627, -391.16482985444236, -382.99132434214533, 644.127)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2813, -391.1646302615905, -382.99132434214533, 689.125)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3005, -391.1645589816919, -382.99132434214533, 733.392)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3195, -391.164520866257, -382.99132434214533, 778.091)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3385, -391.164480131718, -382.99132434214533, 822.782)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3573, -391.164258427072, -382.99132434214533, 867.596)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3761, -391.1642413814243, -382.99132434214533, 911.862)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3949, -391.16416928878175, -382.99132434214533, 956.297)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4139, -391.16396643474746, -382.99132434214533, 1000.898)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4329, -391.16384633936383, -382.99132434214533, 1045.769)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4517, -391.16383644415936, -382.99132434214533, 1090.581)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4703, -391.1636299696961, -382.99132434214533, 1135.355)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4879, -391.1634412728009, -383.3663302962985, 1181.417)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5051, -391.16289185924046, -383.3663302962985, 1227.829)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5211, -391.1622049853399, -383.45045677486553, 1275.079)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5369, -391.16085878429305, -383.45045677486553, 1322.723)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5559, -391.1608200034703, -383.45045677486553, 1367.358)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5751, -391.1607157745746, -383.45045677486553, 1412.088)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5941, -391.1604990859952, -383.45045677486553, 1456.497)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6129, -391.1604668259356, -383.45045677486553, 1501.619)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6317, -391.1601682181749, -383.45045677486553, 1546.235)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6509, -391.1601116567599, -383.45045677486553, 1591.126)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6697, -391.1600808782138, -383.45045677486553, 1636.221)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6887, -391.1600207761418, -383.45045677486553, 1680.954)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7077, -391.159980863665, -383.45045677486553, 1725.616)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7267, -391.1599041881477, -383.45045677486553, 1770.415)
