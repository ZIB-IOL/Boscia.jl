
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (4, 115, "integer")
seed = 4
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.16980704819889916, Inf, 2.696)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 2.369518399695725, Inf, 3.809)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 20.52876517586794, Inf, 5.29)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 751, 22.580084261730462, 44.97209255489077, 7.039)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 889, 24.278083135617788, 44.97209255489077, 8.696)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1007, 25.421347265194544, 44.97209255489077, 10.295)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1119, 26.073348965139193, 44.97209255489077, 11.904)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1241, 26.741932730563644, 44.97209255489077, 13.531)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1357, 27.57759815239495, 44.97209255489077, 15.064)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1467, 28.34798520275677, 44.97209255489077, 16.629)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1571, 28.804402502428058, 44.97209255489077, 18.128)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1675, 29.33377475502267, 44.97209255489077, 19.603)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1779, 29.817026172975044, 44.97209255489077, 21.056)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1879, 30.349087784081306, 44.97209255489077, 22.407)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 1981, 30.805511322528993, 44.97209255489077, 23.862)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2083, 31.17253698495277, 44.97209255489077, 25.222)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2183, 31.559431573267364, 44.97209255489077, 26.502)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2283, 32.01196002060737, 44.97209255489077, 27.834)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2383, 32.35946824230755, 44.97209255489077, 29.209)
build optimizer
