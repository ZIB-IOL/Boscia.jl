
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(example, seed, num_v) = ("neos5", 3, 7)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -6.413922095377474, Inf, 2.566)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -6.268337584786734, Inf, 4.205)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, -6.18662934707292, Inf, 5.89)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, -6.130588060342545, Inf, 7.493)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, -6.078007270142966, Inf, 9.074)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, -6.0470940145759355, Inf, 10.751)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, -6.013923304838249, Inf, 12.328)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, -5.985670890290921, Inf, 13.997)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, -5.9581223553428595, Inf, 15.572)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, -5.93799459213497, Inf, 17.141)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, -5.918981482707744, Inf, 18.808)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, -5.899785134269303, Inf, 20.379)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, -5.883936956144438, Inf, 22.03)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, -5.870589909766503, Inf, 23.607)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, -5.858992160796449, Inf, 25.155)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, -5.846250627315811, Inf, 26.805)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3337, -5.830671979524156, -5.7298678972039, 28.382)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3403, -5.819392567256199, -5.7298678972039, 30.04)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3479, -5.807283493559349, -5.7298678972039, 31.604)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3543, -5.795175377723755, -5.7298678972039, 33.163)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3611, -5.784490418653195, -5.7298678972039, 34.828)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3657, -5.775814484760214, -5.7298678972039, 36.392)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3713, -5.764985525265641, -5.7298678972039, 37.946)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3763, -5.755742084791285, -5.7298678972039, 39.586)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3801, -5.746719520874581, -5.7298678972039, 41.151)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3831, -5.738699352569225, -5.7298678972039, 42.708)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3853, -5.733289428683377, -5.7298678972039, 44.368)
