
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (1, 27)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 1.516329305867419, Inf, 5.989)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 1.5459858675792644, Inf, 11.277)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 1.5673930220369157, Inf, 16.502)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 1.5766554878563315, Inf, 21.765)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 1.5833217238406907, Inf, 26.925)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 1.587606596668926, Inf, 32.054)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 1.5932945541377876, Inf, 37.331)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 1.5988659956917277, Inf, 42.579)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 1.60264108755239, Inf, 47.915)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 1.605410267964627, Inf, 53.274)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 1.6091991360816555, Inf, 58.595)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 1.6112247093075607, Inf, 64.062)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 1.6137458214081328, Inf, 69.531)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 1.6156995185622733, Inf, 74.938)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 1.6184857158647514, Inf, 80.235)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 1.6230491162050218, Inf, 85.57)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 1.6261896063030343, Inf, 90.922)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, 1.6303332402776867, Inf, 96.226)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, 1.633313926487273, Inf, 101.678)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, 1.635265885326024, Inf, 107.188)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, 1.6368171893139858, Inf, 112.887)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, 1.6382283681575869, Inf, 118.482)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, 1.639433472027798, Inf, 123.983)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4797, 1.6414006641205663, 1.7997291811722207, 129.464)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4917, 1.643538715949903, 1.7216944719413783, 135.002)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5033, 1.6457976946553252, 1.7216944719413783, 140.386)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5145, 1.6475584111655692, 1.7216944719413783, 145.968)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5265, 1.6502528703935748, 1.7216944719413783, 151.447)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5389, 1.652211768221757, 1.7216944719413783, 157.059)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5497, 1.6540592417501423, 1.7216944719413783, 162.605)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5605, 1.656087041413455, 1.7216944719413783, 168.051)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5707, 1.6576054391005295, 1.7216944719413783, 173.468)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 5811, 1.6591684510059415, 1.7216944719413783, 178.951)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 5913, 1.6609823784540525, 1.7216944719413783, 184.373)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6017, 1.661796832336673, 1.7216944719413783, 189.927)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6127, 1.662832053541167, 1.7216944719413783, 195.573)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6237, 1.6640906806451599, 1.7216944719413783, 201.083)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 6339, 1.6651351341611589, 1.7216944719413783, 206.364)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 6447, 1.6659975911260791, 1.7216944719413783, 211.909)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 6547, 1.667144616410336, 1.7216944719413783, 217.436)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 6655, 1.6679384416270067, 1.7216944719413783, 222.943)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 6757, 1.6686586947180724, 1.7216944719413783, 228.437)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 6859, 1.6700472728226685, 1.7216944719413783, 233.963)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 6963, 1.6707306515563305, 1.7216944719413783, 239.55)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 7069, 1.6719405027859828, 1.7216944719413783, 245.06)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 7171, 1.672943916794892, 1.7216944719413783, 250.445)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 7273, 1.6738976472342562, 1.7216944719413783, 255.941)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 7373, 1.6745608444358409, 1.7216944719413783, 261.254)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 7475, 1.6753810505047224, 1.7216944719413783, 266.661)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 7575, 1.6763054280036715, 1.7216944719413783, 272.089)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 7677, 1.6770968842375193, 1.7216944719413783, 277.424)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 7777, 1.6778609639224846, 1.7216944719413783, 283.012)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 7877, 1.67866718674588, 1.7216944719413783, 288.629)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5400, 7977, 1.6795904081095063, 1.7216944719413783, 294.015)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5500, 8075, 1.6802562295830261, 1.7177350369409985, 299.523)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5600, 8171, 1.68094211490817, 1.7177350369409985, 305.033)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5700, 8271, 1.6815268002509476, 1.7177350369409985, 310.593)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5800, 8367, 1.682075969065899, 1.7177350369409985, 316.299)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5900, 8463, 1.6832409635789016, 1.7177350369409985, 322.011)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6000, 8559, 1.68407001078508, 1.7177350369409985, 327.742)
(status, bnb_model.incumbent) = ("Optimal", 1.686596502158609)
