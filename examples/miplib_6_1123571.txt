
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (6, 50, "integer")
seed = 6
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 1.1240622838076706, Inf, 1.779)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 3.6786800462581484, Inf, 2.589)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 5.143476534676276, Inf, 3.345)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 5.942780741679255, Inf, 4.213)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 6.475226760074058, Inf, 4.975)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1189, 7.042655545856296, 14.91929952787257, 5.721)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1353, 7.343655173362155, 14.91929952787257, 6.588)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1529, 7.60213865186214, 14.91929952787257, 7.329)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1689, 7.951494100998865, 14.91929952787257, 8.052)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1847, 8.330286122595252, 14.91929952787257, 8.765)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1995, 8.50216174557055, 14.91929952787257, 9.627)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2139, 8.726487809536076, 14.91929952787257, 10.351)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2281, 8.87827711300382, 14.91929952787257, 11.058)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2443, 9.084701666112654, 14.91929952787257, 11.763)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2579, 9.32774558625046, 14.91929952787257, 12.581)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2719, 9.49834350073248, 14.91929952787257, 13.314)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2857, 9.699743330896716, 14.91929952787257, 14.04)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2991, 9.892615045290643, 14.91929952787257, 14.751)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3111, 9.985695507371855, 10.098725140472265, 15.593)
build optimizer
