
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (6, 45, "integer")
seed = 6
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.6354559149519579, Inf, 3.214)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -0.051888318561352606, Inf, 4.658)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 0.6185833823735571, Inf, 6.04)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 1.106598515261753, Inf, 7.636)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 1.4268007404985958, Inf, 9.06)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 1.815714122560771, Inf, 10.402)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 2.1084965130518043, Inf, 11.747)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 2.2938682075523356, Inf, 13.322)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 2.526561610489991, Inf, 14.663)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 2.672538930133356, Inf, 15.989)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 2.807968939240565, Inf, 17.289)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 2.9650225456076442, Inf, 18.872)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 3.1018942544630885, Inf, 20.237)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 3.199910680538663, Inf, 21.598)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 3.330494849311659, Inf, 23.116)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 3.4529640380426336, Inf, 24.505)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 3.5482737943737566, Inf, 25.847)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, 3.651086352352295, Inf, 27.155)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, 3.805351717981478, Inf, 28.616)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, 3.890601651300091, Inf, 29.999)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4163, 3.9808514496120795, 7.08488386451476, 31.28)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4317, 4.03972792109591, 7.08488386451476, 32.611)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4461, 4.109364290310869, 7.08488386451476, 34.122)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4601, 4.158996077580254, 7.08488386451476, 35.49)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4741, 4.219937395991997, 7.08488386451476, 36.842)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4879, 4.287775820607119, 7.08488386451476, 38.169)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5017, 4.352695868459952, 7.08488386451476, 39.454)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5149, 4.421402832250089, 7.08488386451476, 41.056)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5277, 4.471270976035351, 7.08488386451476, 42.357)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5407, 4.526623346000049, 7.08488386451476, 43.667)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5541, 4.580340082945229, 7.08488386451476, 44.948)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5657, 4.617742674536717, 7.08488386451476, 46.476)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 5783, 4.659451754261142, 7.08488386451476, 47.803)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 5909, 4.711640819864452, 7.08488386451476, 49.082)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6027, 4.757268259544021, 7.08488386451476, 50.415)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6149, 4.816450319304347, 7.08488386451476, 51.914)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6265, 4.864939047190122, 7.08488386451476, 53.253)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 6389, 4.900305931800154, 7.08488386451476, 54.584)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 6503, 4.947961547967511, 7.08488386451476, 55.877)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 6633, 4.9898868754251176, 7.08488386451476, 57.146)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 6753, 5.037342640254107, 7.08488386451476, 58.753)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 6843, 5.083291039460568, 5.135838190615807, 60.044)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 6871, 5.119405493292941, 5.135838190615807, 61.365)
build optimizer
