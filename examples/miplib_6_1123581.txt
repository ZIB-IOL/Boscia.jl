
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (6, 55, "integer")
seed = 6
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.6979549293963614, Inf, 1.975)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -0.003036610372407222, Inf, 2.79)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 0.6831462507844317, Inf, 3.731)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 1.0491219159824252, Inf, 4.582)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 1.333881635569174, Inf, 5.394)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 1.627585042745895, Inf, 6.206)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 1.9300236373325081, Inf, 7.15)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 2.1235421617526433, Inf, 7.952)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 2.2661090100491696, Inf, 8.797)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 2.3850325331978723, Inf, 9.704)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 2.552565901415871, Inf, 10.5)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 2.6509341908735555, Inf, 11.298)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 2.774189632784253, Inf, 12.193)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 2.9220021314725657, Inf, 12.985)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 3.0336606564308553, Inf, 13.758)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 3.1007806006390717, Inf, 14.521)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 3.1810461432980994, Inf, 15.398)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, 3.245249479708408, Inf, 16.177)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, 3.3244548514953465, Inf, 16.96)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, 3.410030725438758, Inf, 17.831)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, 3.484761077078553, Inf, 18.596)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, 3.536366691916049, Inf, 19.402)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, 3.5923032431619553, Inf, 20.168)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4801, 3.6403070531376733, Inf, 21.057)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 5001, 3.6910814920175508, Inf, 21.835)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5201, 3.746136821703659, Inf, 22.605)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5401, 3.8027606921147488, Inf, 23.475)
build optimizer
