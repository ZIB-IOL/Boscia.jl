
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (7, 90, "integer")
seed = 7
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.4991487306405695, Inf, 2.213)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 0.8680704867080442, Inf, 3.276)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 1.5568094252976061, Inf, 4.673)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 2.0075213666992444, Inf, 5.929)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 2.3637291386605557, Inf, 7.203)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 2.7558213027110914, Inf, 8.446)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 2.9425233074371775, Inf, 9.678)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 3.251064210814604, Inf, 10.828)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 3.374388628893914, Inf, 12.011)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 3.5875574044624488, Inf, 13.22)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 3.702400452765705, Inf, 14.375)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 3.819540008399939, Inf, 15.522)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 3.9250711263142377, Inf, 16.708)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 4.055854542008713, Inf, 17.867)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 4.158740872155269, Inf, 19.058)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 4.2463896428047825, Inf, 20.226)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 4.36365357690065, Inf, 21.433)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, 4.470552694708741, Inf, 22.584)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, 4.552021265896433, Inf, 23.788)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, 4.63234329737559, Inf, 24.93)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, 4.716825089744707, Inf, 26.09)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, 4.807340094263546, Inf, 27.175)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, 4.8707060078726325, Inf, 28.288)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4801, 4.936711319848168, Inf, 29.428)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 5001, 5.008616853962838, Inf, 30.594)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5201, 5.06599898162679, Inf, 31.792)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5401, 5.136016913294621, Inf, 32.909)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5601, 5.202626469882252, Inf, 34.058)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5801, 5.264171930833469, Inf, 35.21)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5969, 5.3360098403878915, 9.248988238714146, 36.295)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 6097, 5.397207202308302, 9.248988238714146, 37.401)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 6231, 5.444171213588318, 9.248988238714146, 38.541)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6363, 5.515396382847829, 9.248988238714146, 39.655)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6501, 5.570589596816719, 9.248988238714146, 40.763)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6633, 5.614054614797523, 9.248988238714146, 41.925)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6759, 5.652976001678874, 9.248988238714146, 42.999)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6891, 5.694428994892288, 9.248988238714146, 44.149)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7007, 5.73124291316741, 9.248988238714146, 45.25)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7145, 5.771406219339116, 9.248988238714146, 46.357)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 7277, 5.81496828266796, 9.248988238714146, 47.474)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 7399, 5.861522608942975, 9.248988238714146, 48.576)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 7529, 5.906008763782276, 9.248988238714146, 49.673)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 7649, 5.973750907046954, 9.248988238714146, 50.782)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 7775, 6.007029835192576, 9.248988238714146, 51.875)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 7907, 6.045952869064729, 9.248988238714146, 53.076)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 8027, 6.079865119002072, 9.248988238714146, 54.236)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 8153, 6.1196964676374535, 9.248988238714146, 55.357)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 8273, 6.144947934040873, 9.248988238714146, 56.467)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 8393, 6.179324111029563, 9.248988238714146, 57.606)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 8511, 6.211346945838532, 9.248988238714146, 58.665)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 8647, 6.240552915129929, 9.248988238714146, 59.863)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 8769, 6.270051711577972, 9.248988238714146, 61.025)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 8897, 6.304709943465012, 9.248988238714146, 62.054)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5400, 9017, 6.339327187319102, 9.248988238714146, 63.189)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5500, 9137, 6.374879077729936, 9.248988238714146, 64.22)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5600, 9259, 6.39957094473375, 9.248988238714146, 65.317)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5700, 9373, 6.424585568542457, 9.248988238714146, 66.474)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5800, 9499, 6.453151084787694, 9.248988238714146, 67.545)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5900, 9607, 6.485932257101183, 9.248988238714146, 68.669)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6000, 9727, 6.5193197513584975, 9.248988238714146, 69.757)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6100, 9843, 6.543048847215113, 9.248988238714146, 70.793)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6200, 9959, 6.573884810789695, 9.248988238714146, 71.954)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6300, 10083, 6.605797679210079, 9.248988238714146, 73.036)
build optimizer
