
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (8, 5, 1.0, 5.0, 5)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 159, 0.26428415973721286, 0.33046756720122217, 7.26)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 305, 0.27112200781123164, 0.33046756720122217, 10.429)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 427, 0.2751785344395025, 0.33046756720122217, 13.308)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 539, 0.2783088076746445, 0.3226503084953114, 16.132)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 653, 0.2802458148171736, 0.3226503084953114, 18.957)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 769, 0.2816555751174349, 0.3226503084953114, 21.737)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 887, 0.2836146730696758, 0.3226503084953114, 24.539)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1005, 0.28515607805166576, 0.3226503084953114, 27.285)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1127, 0.2863743212077234, 0.3226503084953114, 30.084)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1257, 0.28807973960950806, 0.3226503084953114, 32.898)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1389, 0.28892988298724875, 0.3226503084953114, 35.733)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1511, 0.2900618804335986, 0.3226503084953114, 38.47)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1633, 0.29120403403163564, 0.3226503084953114, 41.209)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1759, 0.29289036238059957, 0.3226503084953114, 44.045)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 1883, 0.2940156927288662, 0.3099459706122978, 46.821)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 1995, 0.2948759631945739, 0.3093680580699637, 49.594)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2111, 0.2957950217508205, 0.3093680580699637, 52.375)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2229, 0.29653985014009643, 0.3093680580699637, 55.175)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2327, 0.29746188163643633, 0.3093680580699637, 57.906)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2429, 0.29803161626723873, 0.3093680580699637, 60.621)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2529, 0.29846050079694647, 0.3093680580699637, 63.447)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2603, 0.2991261698811636, 0.3093680580699637, 66.135)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2683, 0.2997729264875617, 0.3093680580699637, 68.886)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 2757, 0.3002647219815601, 0.3093680580699637, 71.613)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 2839, 0.30109617134830446, 0.3093680580699637, 74.37)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 2947, 0.3017719389048449, 0.3093680580699637, 77.155)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3069, 0.30242064540785674, 0.3093680580699637, 79.971)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3183, 0.3029841201859488, 0.3093680580699637, 82.785)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3299, 0.3035144434176657, 0.3093680580699637, 85.659)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3405, 0.30412783113210595, 0.3093680580699637, 88.43)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3497, 0.30450034925892555, 0.3093680580699637, 91.195)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 3595, 0.30481522883691303, 0.3093680580699637, 93.99)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 3695, 0.305170550300077, 0.3093680580699637, 96.804)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 3799, 0.3054530535128529, 0.3093680580699637, 99.62)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 3881, 0.30581725452926056, 0.3093680580699637, 102.417)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 3965, 0.3061092707535531, 0.3093680580699637, 105.208)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 4037, 0.30640764189076075, 0.3093680580699637, 107.998)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 4095, 0.30683664589185355, 0.3093680580699637, 110.787)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 4145, 0.30725541840750187, 0.3093680580699637, 113.608)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 4195, 0.3076115176020325, 0.3093680580699637, 116.447)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 4233, 0.30811746253465755, 0.3093680580699637, 119.233)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 4259, 0.3087392104314046, 0.3093680580699637, 121.979)
