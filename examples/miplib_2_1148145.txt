
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (2, 5, 1.0, 5.0, 1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 145, 0.4989736726644335, 0.5636865597881995, 5.531)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 269, 0.5025139146499639, 0.5636865597881995, 7.977)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 391, 0.5074307648075005, 0.5388452704905841, 10.29)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 505, 0.5099589153925408, 0.5388452704905841, 12.59)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 641, 0.5113168979815057, 0.5388452704905841, 14.941)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 761, 0.5130762595003193, 0.5388452704905841, 17.233)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 889, 0.5140288218759761, 0.5388452704905841, 19.578)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 989, 0.5151452559478785, 0.5388452704905841, 21.814)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1121, 0.5160576868236275, 0.5388452704905841, 24.172)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1235, 0.5170484892996429, 0.5388452704905841, 26.441)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1349, 0.5183376878177879, 0.5388452704905841, 28.705)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1457, 0.5195421472009011, 0.5388452704905841, 30.977)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1583, 0.5202337118584089, 0.5388452704905841, 33.268)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1689, 0.5212518982468348, 0.5388452704905841, 35.536)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 1799, 0.5222678881929175, 0.5388452704905841, 37.812)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 1907, 0.5234561119448844, 0.5388452704905841, 40.066)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2013, 0.5242846156665313, 0.5388452704905841, 42.314)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2105, 0.5249913702008643, 0.5388452704905841, 44.543)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2205, 0.5256667882891893, 0.5388452704905841, 46.779)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2311, 0.5263660228092162, 0.5388452704905841, 49.033)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2425, 0.5268468017225117, 0.5388452704905841, 51.345)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2523, 0.5273938280357395, 0.5388452704905841, 53.603)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2645, 0.527832644379981, 0.5388452704905841, 55.936)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 2763, 0.5283654406445129, 0.5388452704905841, 58.22)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 2863, 0.5290066985711193, 0.5388452704905841, 60.456)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 2973, 0.529495445422563, 0.5388452704905841, 62.725)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3083, 0.5301202415021586, 0.5388452704905841, 64.958)
