
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (3, 15)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 3.071386003699628, Inf, 4.067)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 3.1251949395105196, Inf, 7.218)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 3.1584268786662624, Inf, 10.233)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 3.1724683233061737, Inf, 13.278)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 997, 3.1850075074140394, 3.509903857052474, 16.486)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1113, 3.2044460881141683, 3.358072348325635, 19.562)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1217, 3.2176827188970787, 3.358072348325635, 22.643)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1319, 3.224596741897853, 3.358072348325635, 25.921)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1425, 3.234359285655874, 3.358072348325635, 29.009)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1531, 3.245419678372018, 3.358072348325635, 32.138)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1633, 3.255817584006812, 3.358072348325635, 35.088)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1733, 3.2628389011873797, 3.358072348325635, 38.183)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1837, 3.269843868295054, 3.358072348325635, 41.276)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1939, 3.2771210873803978, 3.358072348325635, 44.304)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2039, 3.2846620964728483, 3.358072348325635, 47.473)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2139, 3.2887342805898685, 3.358072348325635, 50.561)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2237, 3.2960608953514914, 3.358072348325635, 53.58)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2337, 3.2982116095054987, 3.358072348325635, 56.635)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2437, 3.30166200817542, 3.358072348325635, 59.675)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2535, 3.308074458159303, 3.358072348325635, 62.695)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2633, 3.313518970665603, 3.358072348325635, 65.614)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2725, 3.3171658153934045, 3.358072348325635, 68.627)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2819, 3.320924438072362, 3.358072348325635, 71.466)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 2911, 3.324505876534304, 3.358072348325635, 74.531)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3007, 3.3275423408617035, 3.358072348325635, 77.542)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3089, 3.331451157714517, 3.358072348325635, 80.671)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3175, 3.334718749054427, 3.358072348325635, 83.786)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3271, 3.3367661941023883, 3.358072348325635, 86.682)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3355, 3.3390252409038976, 3.358072348325635, 89.82)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3441, 3.341805781874477, 3.358072348325635, 92.843)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3527, 3.3448070035354953, 3.358072348325635, 95.895)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 3613, 3.347491721603889, 3.358072348325635, 98.951)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 3695, 3.3497597795246787, 3.358072348325635, 101.838)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 3771, 3.3531012609340918, 3.358072348325635, 104.836)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 3845, 3.3558233102778554, 3.358072348325635, 107.745)
(status, bnb_model.incumbent) = ("Optimal", 3.358072348325635)
