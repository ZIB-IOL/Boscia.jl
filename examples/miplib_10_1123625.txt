
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (10, 75, "integer")
seed = 10
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.6035457317871797, Inf, 3.9)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -0.06897908971189415, Inf, 5.787)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 0.3735645910337815, Inf, 7.9)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 0.8960021430342114, Inf, 9.972)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 1.1276085738462427, Inf, 12.146)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 1.3167639030886158, Inf, 14.2)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 1.4738757182583397, Inf, 16.428)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 1.6599006678788035, Inf, 18.417)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 1.79151670814187, Inf, 20.521)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 1.9003767263698181, Inf, 22.527)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 2.024352762127073, Inf, 24.504)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2385, 2.1138656052310996, 4.931933959118814, 26.363)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2539, 2.1791505107047566, 4.931933959118814, 28.469)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2681, 2.2609978700448607, 4.931933959118814, 30.311)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2827, 2.3385649028464317, 4.931933959118814, 32.394)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2971, 2.385052450807171, 4.931933959118814, 34.311)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3121, 2.4453507518641024, 4.931933959118814, 36.233)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3253, 2.522213870370523, 4.931933959118814, 38.254)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3387, 2.5933178671333685, 4.931933959118814, 40.15)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3523, 2.652637388541815, 4.931933959118814, 42.131)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3657, 2.7016783733179626, 4.931933959118814, 44.033)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3801, 2.7583804001003256, 4.931933959118814, 46.004)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3919, 2.806303826998485, 4.931933959118814, 47.822)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4047, 2.850663376616745, 4.931933959118814, 49.778)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4171, 2.906412391856833, 4.931933959118814, 51.691)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4291, 2.969479592389705, 4.931933959118814, 53.587)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4421, 3.004819458026208, 4.931933959118814, 55.616)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 4543, 3.0395205426821312, 4.931933959118814, 57.463)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 4671, 3.089283833384165, 4.931933959118814, 59.421)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 4799, 3.132923877109677, 4.931933959118814, 61.329)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 4919, 3.1743676152912226, 4.931933959118814, 63.131)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5037, 3.211068558209391, 4.931933959118814, 65.014)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 5149, 3.2519136538471023, 4.931933959118814, 66.847)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 5263, 3.2825581903374, 4.931933959118814, 68.786)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 5379, 3.319890196577114, 4.931933959118814, 70.703)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 5489, 3.3469692864841685, 4.931933959118814, 72.657)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 5601, 3.3901932539089232, 4.931933959118814, 74.447)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 5709, 3.4191319254747916, 4.931933959118814, 76.237)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 5831, 3.4605513258296097, 4.931933959118814, 78.24)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 5937, 3.4973804879817374, 4.931933959118814, 80.11)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 6049, 3.526869832504585, 4.931933959118814, 82.134)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 6159, 3.5497702332181755, 4.931933959118814, 84.0)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 6267, 3.565624779667251, 4.931933959118814, 85.862)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 6379, 3.5949945242490835, 4.931933959118814, 87.776)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 6487, 3.6169451519633724, 4.931933959118814, 89.592)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 6593, 3.6490108949951883, 4.931933959118814, 91.556)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 6633, 3.686087286320343, 3.6927945900425123, 93.352)
build optimizer
