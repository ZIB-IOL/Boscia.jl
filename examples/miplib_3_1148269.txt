
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (3, 20, 1.0, 20.0, 1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 0.5929349835465915, Inf, 38.675)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 0.5929682794887253, Inf, 79.244)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 0.5929817024252952, Inf, 119.901)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 0.5930023681773287, Inf, 160.846)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 0.5930238791480886, Inf, 201.694)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 0.5930476492868184, Inf, 242.302)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 0.5930644052798283, Inf, 282.537)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 0.5930841357386166, Inf, 323.676)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 0.5931045899548033, Inf, 365.026)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 0.5931208588168608, Inf, 406.384)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 0.5931348448290173, Inf, 448.063)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 0.5931395768983797, Inf, 488.744)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 0.5931475926029204, Inf, 529.292)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 0.5931560623413892, Inf, 570.817)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 0.5931644831225817, Inf, 612.166)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 0.5931707801766988, Inf, 652.899)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 0.5931768947041125, Inf, 694.97)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, 0.5931829440352104, Inf, 736.392)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, 0.5931904117411686, Inf, 777.602)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, 0.5931978582010403, Inf, 818.854)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, 0.5932025275489974, Inf, 860.073)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, 0.5932080439221599, Inf, 901.115)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, 0.5932130707062753, Inf, 941.961)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4801, 0.593218746710261, Inf, 982.332)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 5001, 0.5932240194161471, Inf, 1022.99)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5201, 0.5932286694074775, Inf, 1063.882)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5401, 0.5932362010262029, Inf, 1105.046)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5601, 0.5932421040754596, Inf, 1145.93)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5801, 0.5932490328594354, Inf, 1187.044)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 6001, 0.5932557879653806, Inf, 1228.264)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 6201, 0.5932609306419008, Inf, 1269.826)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 6401, 0.5932674509006305, Inf, 1311.202)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6601, 0.593276877071117, Inf, 1353.064)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6801, 0.593281494253274, Inf, 1394.241)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 7001, 0.5932857642674301, Inf, 1435.618)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 7201, 0.5932908122805476, Inf, 1476.89)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 7401, 0.5932967093814274, Inf, 1518.203)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7601, 0.5933012391219389, Inf, 1560.137)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7801, 0.5933061106248991, Inf, 1602.255)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 8001, 0.5933088922686248, Inf, 1643.196)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 8201, 0.593314260400807, Inf, 1684.564)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 8401, 0.5933186499116622, Inf, 1726.23)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 8601, 0.593321248133713, Inf, 1768.108)
