
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (4, 27)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 4.771340165802578, Inf, 5.923)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 4.832067073901903, Inf, 10.842)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 4.852322944107524, Inf, 16.107)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 4.880819250927753, Inf, 21.502)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 4.910502795016973, Inf, 26.804)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 4.925715738216695, Inf, 32.079)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 4.943193283479927, Inf, 37.51)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1569, 4.957879468423932, 5.2347377974282505, 42.753)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1693, 4.969372005638441, 5.221515439566629, 48.083)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1809, 4.976976025580306, 5.221515439566629, 53.462)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1923, 4.9845154115861865, 5.221515439566629, 58.859)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2033, 4.993097085250851, 5.191800103957509, 64.15)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2139, 4.99836120147806, 5.191800103957509, 69.751)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2245, 5.002557732652686, 5.191800103957509, 75.27)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2349, 5.007054924907226, 5.191800103957509, 80.731)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2457, 5.015397265782726, 5.191800103957509, 86.125)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2561, 5.021584544795718, 5.191800103957509, 91.416)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2663, 5.026016291485694, 5.191800103957509, 96.85)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2765, 5.03165748773038, 5.191800103957509, 102.319)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2867, 5.036684054111616, 5.191800103957509, 107.582)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2971, 5.040458763285678, 5.191800103957509, 112.916)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3073, 5.0432063766513116, 5.191800103957509, 118.764)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3173, 5.047769570667772, 5.191800103957509, 124.107)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3275, 5.052601188072975, 5.191800103957509, 129.492)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3379, 5.055857391701721, 5.191800103957509, 135.059)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3479, 5.057885664436862, 5.191800103957509, 140.388)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3581, 5.060858664859449, 5.191800103957509, 146.281)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3683, 5.0645394187296375, 5.191800103957509, 151.65)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3783, 5.068862844689139, 5.191800103957509, 157.137)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3883, 5.071151196563946, 5.191800103957509, 162.666)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3983, 5.073735249453785, 5.191800103957509, 167.783)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 4083, 5.075193400120365, 5.191800103957509, 173.34)
(status, bnb_model.incumbent) = ("Optimal", 5.07558434218833)
