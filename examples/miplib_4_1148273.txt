
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (4, 20, 1.0, 20.0, 1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 193, 0.6027554900519205, 0.6583263768962127, 36.727)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 381, 0.6027941484017736, 0.6580675754534657, 76.276)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 565, 0.602800689952356, 0.6580675754534657, 115.889)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 753, 0.60280521042495, 0.6576337470025333, 154.928)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 941, 0.6028125499964526, 0.65756967020287, 194.064)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1127, 0.6028465202306991, 0.65756967020287, 233.148)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1313, 0.6028508249059557, 0.6569575622542919, 272.463)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1495, 0.6028561146395452, 0.6569575622542919, 311.432)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1677, 0.6028605207764237, 0.6569507161786022, 350.245)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1853, 0.602899945436016, 0.6569507161786022, 389.368)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2027, 0.6029072495480846, 0.6553855537553624, 428.397)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2205, 0.6029401480451416, 0.6553855537553624, 467.854)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2389, 0.6029466439571736, 0.6553855537553624, 507.476)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2561, 0.6029587298132639, 0.6553855537553624, 547.523)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2741, 0.602983933061876, 0.6553855537553624, 586.966)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2927, 0.6029891526424568, 0.6553855537553624, 626.772)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3117, 0.6029929110641566, 0.6553855537553624, 666.66)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3301, 0.6029970332858241, 0.6553855537553624, 706.001)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3489, 0.6030026299390208, 0.6553855537553624, 745.472)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3657, 0.6030298877358858, 0.6549153255252051, 784.203)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3839, 0.6030364381818841, 0.6549153255252051, 823.691)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4025, 0.603039040211324, 0.6549153255252051, 863.49)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4207, 0.6030428299309888, 0.6549153255252051, 903.307)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4395, 0.6030450781546588, 0.6549153255252051, 943.109)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4579, 0.6030486286277438, 0.6549153255252051, 982.483)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4733, 0.6030770568916161, 0.6549153255252051, 1021.017)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4917, 0.6030812723890047, 0.6549153255252051, 1060.97)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5101, 0.603083413447744, 0.6549153255252051, 1100.639)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5287, 0.6030853063671042, 0.6549153255252051, 1140.405)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5469, 0.6030873843580205, 0.6549153255252051, 1180.033)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5655, 0.6030898805235854, 0.6549153255252051, 1219.729)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5837, 0.6030929491207748, 0.6549153255252051, 1259.182)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6017, 0.6030972105350594, 0.6549153255252051, 1298.789)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6199, 0.6031037879226805, 0.6549153255252051, 1338.334)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6361, 0.6031237927605668, 0.6549153255252051, 1377.28)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6543, 0.6031262881972655, 0.6549153255252051, 1416.936)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6723, 0.6031297406045194, 0.6549153255252051, 1456.624)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 6905, 0.6031318385945335, 0.6549153255252051, 1496.173)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7089, 0.603133651026372, 0.6549153255252051, 1535.835)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 7277, 0.6031358271514575, 0.6549153255252051, 1575.758)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 7455, 0.6031385332181263, 0.6549153255252051, 1615.476)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 7639, 0.6031405064445194, 0.6549153255252051, 1655.03)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 7821, 0.6031424236912588, 0.6549153255252051, 1694.481)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 8005, 0.603144702058116, 0.6549153255252051, 1734.237)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 8189, 0.603147706024755, 0.6549153255252051, 1773.694)
