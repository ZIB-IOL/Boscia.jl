
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (7, 120, "integer")
seed = 7
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.31578928246043036, Inf, 2.819)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 1.1857003842967853, Inf, 3.971)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 10.261172440779825, Inf, 5.467)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 12.020236401368887, Inf, 7.375)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 13.312697935925254, Inf, 9.226)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 13.860059217982624, Inf, 11.009)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 14.76727187878292, Inf, 12.738)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 15.189493171673353, Inf, 14.465)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 15.66553832617558, Inf, 16.214)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 16.16065670266914, Inf, 17.899)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 16.546831171335928, Inf, 19.606)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 16.877204651527055, Inf, 21.207)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 17.224345040249972, Inf, 22.813)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 17.53955025566673, Inf, 24.456)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 17.777015776850455, Inf, 26.103)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 18.053885981223498, Inf, 27.64)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 18.34479637694443, Inf, 29.228)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, 18.58733057358726, Inf, 30.775)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3773, 18.877053767283606, 34.6344178513626, 32.35)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3909, 19.103498581597474, 34.6344178513626, 34.011)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4031, 19.381866303536043, 34.6344178513626, 35.467)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4171, 19.694457019106533, 34.6344178513626, 37.007)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4295, 19.97267129584334, 34.6344178513626, 38.502)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4421, 20.186896103618324, 34.6344178513626, 40.096)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4549, 20.315563823931683, 34.6344178513626, 41.661)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4667, 20.493420723673655, 34.6344178513626, 43.065)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4791, 20.64563530425148, 34.6344178513626, 44.631)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 4915, 20.867038703254966, 34.6344178513626, 46.075)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5049, 21.06544906894257, 34.6344178513626, 47.542)
build optimizer
