
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (4, 95, "integer")
seed = 4
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.09884303799843777, Inf, 4.048)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 6.862164205974134, Inf, 5.804)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 8.915831471559319, Inf, 8.445)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 781, 10.275478001260174, 24.25067119677449, 11.047)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 933, 11.738104914131963, 24.25067119677449, 13.562)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1073, 12.747269237744504, 24.25067119677449, 15.965)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1199, 13.148021656579418, 24.25067119677449, 18.375)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1325, 13.782671458834777, 24.25067119677449, 20.859)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1439, 14.428429022914091, 24.25067119677449, 23.239)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1555, 14.728662741818148, 24.25067119677449, 25.694)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1665, 15.201962431140558, 21.34090331061791, 27.918)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1767, 15.654552376747885, 21.34090331061791, 30.287)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1873, 15.95812017242671, 21.34090331061791, 32.441)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1977, 16.346659601639473, 21.34090331061791, 34.803)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2081, 16.728268279917017, 21.34090331061791, 37.126)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2181, 16.999481398285226, 21.34090331061791, 39.343)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2281, 17.28585209486462, 21.34090331061791, 41.682)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2381, 17.511971506069337, 21.34090331061791, 43.955)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2481, 17.782600584840598, 21.34090331061791, 46.127)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2581, 18.005952447858352, 21.34090331061791, 48.445)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2681, 18.165641291831857, 21.34090331061791, 50.739)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2777, 18.396658721389773, 21.34090331061791, 53.022)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2875, 18.574729922214033, 21.34090331061791, 55.1)
build optimizer
