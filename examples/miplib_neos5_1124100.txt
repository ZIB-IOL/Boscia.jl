
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(example, seed, num_v) = ("neos5", 2, 8)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -11.098902471577, Inf, 2.752)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -10.940965691406394, Inf, 4.539)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, -10.84465855239479, Inf, 6.378)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, -10.781470200855155, Inf, 8.125)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, -10.738595479314453, Inf, 9.963)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, -10.694064571007486, Inf, 11.715)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, -10.659346126371902, Inf, 13.464)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, -10.625320947877132, Inf, 15.287)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, -10.5980205437292, Inf, 17.028)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, -10.574346202924177, Inf, 18.833)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, -10.556929257200467, Inf, 20.584)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, -10.539861693844452, Inf, 22.306)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, -10.523866907574408, Inf, 24.133)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, -10.509485864306823, Inf, 25.85)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, -10.49733152883998, Inf, 27.638)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, -10.487886718642269, Inf, 29.347)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, -10.47464086888336, Inf, 31.114)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, -10.462613132110354, Inf, 32.844)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, -10.453233392165838, Inf, 34.539)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, -10.44237417679388, Inf, 36.323)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, -10.432859861025374, Inf, 38.029)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, -10.422995533904786, Inf, 39.817)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, -10.41101880450512, Inf, 41.537)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4801, -10.402169995002907, Inf, 43.227)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 5001, -10.392531499977197, Inf, 45.024)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5201, -10.384185422641533, Inf, 46.728)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5401, -10.376300407787323, Inf, 48.499)
