
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (5, 105, "integer")
seed = 5
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.3641321791716795, Inf, 2.517)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 3.8637158394964715, Inf, 3.497)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 9.44214800904143, Inf, 5.079)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 10.81672235629122, Inf, 6.747)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 11.311306602421002, Inf, 8.319)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1171, 11.849884402211373, 22.258796789526478, 9.805)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1301, 12.244120975247846, 22.258796789526478, 11.3)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1425, 12.611909965534384, 22.258796789526478, 12.741)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1547, 13.171085948750862, 22.258796789526478, 14.117)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1657, 13.57675361711503, 22.258796789526478, 15.492)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1771, 13.892660002934557, 22.258796789526478, 16.932)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1877, 14.208195593662982, 22.258796789526478, 18.271)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1983, 14.45070913982138, 22.258796789526478, 19.57)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2089, 14.70696525356767, 22.258796789526478, 20.858)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2193, 14.999038809228542, 22.258796789526478, 22.145)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2293, 15.311074447394448, 22.258796789526478, 23.459)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2403, 15.537465504785358, 22.258796789526478, 24.741)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2511, 15.758964091274589, 22.258796789526478, 26.053)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2615, 16.092652473292482, 22.258796789526478, 27.374)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2719, 16.278640203903212, 22.258796789526478, 28.619)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2819, 16.475109559914028, 22.258796789526478, 29.809)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2919, 16.675004192613848, 22.258796789526478, 30.994)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3019, 16.84579516749518, 22.258796789526478, 32.239)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3121, 17.043030693690667, 22.258796789526478, 33.464)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3221, 17.259388242787736, 22.258796789526478, 34.679)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3321, 17.52896518077918, 22.258796789526478, 35.863)
build optimizer
