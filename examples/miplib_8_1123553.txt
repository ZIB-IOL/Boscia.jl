
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (8, 40, "integer")
seed = 8
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -1.6314962328458997, Inf, 1.828)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -1.1150425675560331, Inf, 2.547)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, -0.7986714977792743, Inf, 3.235)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, -0.6468158384713475, Inf, 3.924)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, -0.4322937465492477, Inf, 4.733)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, -0.2936992922915243, Inf, 5.379)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, -0.11562605029128137, Inf, 6.031)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, -0.022448815258075683, Inf, 6.695)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 0.10425872448993576, Inf, 7.481)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 0.2122504496445387, Inf, 8.128)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 0.28930016293169597, Inf, 8.786)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 0.39324863757021167, Inf, 9.426)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 0.4899813989268337, Inf, 10.21)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 0.5750448992916833, Inf, 10.841)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 0.6434760234438317, Inf, 11.482)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 0.6827575663072487, Inf, 12.142)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 0.7531651242743606, Inf, 12.877)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, 0.8066844838587638, Inf, 13.538)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, 0.8442610558481296, Inf, 14.197)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, 0.8844793736829667, Inf, 14.872)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, 0.9227047610620306, Inf, 15.5)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, 0.9681397827990581, Inf, 16.293)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, 1.017909843563635, Inf, 16.956)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4801, 1.0768897278912677, Inf, 17.621)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 5001, 1.1158846806565415, Inf, 18.246)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5201, 1.1729054406200756, Inf, 19.014)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5401, 1.217206180837866, Inf, 19.673)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5601, 1.2554739460031707, Inf, 20.335)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5801, 1.2897801789981025, Inf, 20.969)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5957, 1.3186842927009548, 3.589286718411177, 21.606)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 6117, 1.354502371108496, 3.589286718411177, 22.42)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 6259, 1.3869393654023443, 3.589286718411177, 23.069)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6407, 1.42661483201804, 3.589286718411177, 23.71)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6557, 1.461433525397533, 3.589286718411177, 24.357)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6691, 1.4922427715629263, 3.589286718411177, 25.135)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6831, 1.521899676869902, 3.589286718411177, 25.776)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6981, 1.5536020271792261, 3.589286718411177, 26.419)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7115, 1.5825539854054098, 3.589286718411177, 27.058)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7247, 1.6033686082327798, 3.589286718411177, 27.671)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 7363, 1.635951373055072, 1.704739541757375, 28.458)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 7399, 1.662625670262064, 1.704739541757375, 29.111)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 7441, 1.6868524215153706, 1.704739541757375, 29.728)
build optimizer
