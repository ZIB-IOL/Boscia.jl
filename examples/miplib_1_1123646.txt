
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (1, 90, "integer")
seed = 1
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.4361158407931169, Inf, 2.226)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 0.8602560123897611, Inf, 3.344)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 1.992523471717565, Inf, 4.676)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 2.763668216637587, Inf, 6.007)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 3.5842212065321135, Inf, 7.309)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 4.246283625603147, Inf, 8.631)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 4.557604142300548, Inf, 9.897)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 4.841321985530482, Inf, 11.139)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 5.129216927440456, Inf, 12.453)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 5.379018927982106, Inf, 13.758)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2191, 5.6026230734433025, 14.59034949280097, 15.069)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2373, 5.8404108229453815, 14.59034949280097, 16.259)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2547, 6.038615067518961, 14.59034949280097, 17.532)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2725, 6.183123261203559, 14.59034949280097, 18.767)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2905, 6.306322777233096, 14.59034949280097, 20.024)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3087, 6.463894251423857, 14.59034949280097, 21.263)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3259, 6.590045576398817, 14.59034949280097, 22.497)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3447, 6.749398780144292, 14.59034949280097, 23.826)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3625, 6.863022516514609, 14.59034949280097, 25.043)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3787, 6.964152987236176, 14.59034949280097, 26.28)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3963, 7.045670105909811, 14.59034949280097, 27.559)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4133, 7.132770894863941, 14.59034949280097, 28.722)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4295, 7.235541149540849, 14.59034949280097, 29.919)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4463, 7.325259584222248, 14.59034949280097, 31.193)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4631, 7.399024520970551, 14.59034949280097, 32.473)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4789, 7.485180967580903, 14.59034949280097, 33.637)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4939, 7.567852475154448, 14.59034949280097, 34.832)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5111, 7.651321681129093, 14.59034949280097, 36.111)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5279, 7.716745281353423, 14.59034949280097, 37.334)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5431, 7.797176100088283, 14.59034949280097, 38.563)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5577, 7.889955291927663, 14.59034949280097, 39.721)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5727, 7.961636811796151, 14.59034949280097, 40.888)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 5881, 8.032431860084744, 14.59034949280097, 42.046)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6039, 8.100477190952216, 14.59034949280097, 43.263)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6191, 8.17841252066749, 14.59034949280097, 44.464)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6349, 8.23059699871458, 14.59034949280097, 45.708)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6503, 8.291966030164303, 14.59034949280097, 46.924)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 6657, 8.34643381524713, 14.59034949280097, 48.094)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 6799, 8.40796390123166, 14.59034949280097, 49.256)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 6947, 8.482660660006212, 14.59034949280097, 50.481)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 7103, 8.534536418310314, 14.59034949280097, 51.672)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 7243, 8.580036855618044, 14.59034949280097, 52.876)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 7399, 8.636322659514784, 14.59034949280097, 54.142)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 7547, 8.689692442132696, 14.59034949280097, 55.309)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 7703, 8.760021087267006, 14.59034949280097, 56.533)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 7853, 8.826093999272292, 14.59034949280097, 57.782)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 7993, 8.880824656881982, 14.59034949280097, 58.925)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 8137, 8.941677367586179, 14.59034949280097, 60.15)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 8277, 8.997261128317355, 14.59034949280097, 61.293)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 8415, 9.03116404710672, 14.59034949280097, 62.513)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 8553, 9.07678113022312, 14.59034949280097, 63.712)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 8697, 9.12592114348077, 14.59034949280097, 64.858)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 8831, 9.16809406708252, 14.59034949280097, 66.087)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5400, 8957, 9.230820142315771, 14.59034949280097, 67.228)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5500, 9099, 9.273601367733914, 14.59034949280097, 68.346)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5600, 9243, 9.329291648803165, 14.59034949280097, 69.553)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5700, 9373, 9.375048640784605, 14.59034949280097, 70.727)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5800, 9521, 9.421291364317472, 14.59034949280097, 71.937)
build optimizer
