
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (2, 20, 1.0, 20.0, 5)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 0.2803370364055497, Inf, 37.208)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 0.28035024007488946, Inf, 77.636)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 0.28037051428105175, Inf, 119.645)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 789, 0.2804757384371952, 0.5298573668068287, 160.955)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 989, 0.2804853330682112, 0.5298573668068287, 200.922)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1189, 0.28050046976696436, 0.5298573668068287, 243.115)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1389, 0.280507057264824, 0.5298573668068287, 283.765)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1589, 0.28051270073095985, 0.5298573668068287, 324.859)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1789, 0.28052259321439554, 0.5298573668068287, 365.245)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1989, 0.280529016662473, 0.5298573668068287, 406.806)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2187, 0.2805326402671676, 0.5296634275257327, 448.228)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2385, 0.2805434951201581, 0.5296634275257327, 491.279)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2581, 0.28055339658754413, 0.5296634275257327, 534.388)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2761, 0.2805679859841193, 0.5296634275257327, 577.327)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2947, 0.2805775409727863, 0.5292848436006581, 618.973)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3141, 0.2805891547803407, 0.5292848436006581, 661.014)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3327, 0.28060581434096743, 0.5292848436006581, 704.116)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3453, 0.28063443027336354, 0.5292848436006581, 747.492)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3643, 0.28064519731219456, 0.5292848436006581, 788.681)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3841, 0.280651805654189, 0.5292848436006581, 829.432)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4039, 0.2806556193180141, 0.5292848436006581, 870.567)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4235, 0.2806598767666765, 0.5292848436006581, 912.265)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4431, 0.2806652682565456, 0.5292848436006581, 954.044)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4625, 0.28066847197226574, 0.5292848436006581, 996.271)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4815, 0.2806742275380337, 0.5292848436006581, 1038.293)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5011, 0.2806795834450635, 0.5292848436006581, 1081.281)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5203, 0.2806840521555786, 0.5292848436006581, 1123.259)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5391, 0.2806887972834447, 0.5292848436006581, 1166.174)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5589, 0.2806927658764883, 0.5292848436006581, 1207.324)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5771, 0.2806986646483955, 0.5292848436006581, 1249.66)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5961, 0.28070280288783733, 0.5292848436006581, 1289.734)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 6143, 0.2807089787736525, 0.5292848436006581, 1331.386)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6335, 0.280714721295848, 0.5292848436006581, 1373.273)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6513, 0.2807197202003462, 0.5292848436006581, 1415.151)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6685, 0.28072620623052436, 0.5041920933511655, 1457.388)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6871, 0.2807295031042368, 0.5041920933511655, 1498.836)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 7045, 0.2807334703090833, 0.5041920933511655, 1540.797)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7227, 0.2807370376527224, 0.5041920933511655, 1583.015)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7399, 0.2807412790649131, 0.5041920933511655, 1625.559)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 7581, 0.2807451840271417, 0.5041920933511655, 1668.132)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 7769, 0.28074881280566955, 0.5041920933511655, 1710.03)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 7959, 0.28075099900372946, 0.5041920933511655, 1751.958)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 8147, 0.280754670717696, 0.5041920933511655, 1794.663)
