
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (7, 25)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 3.5507702330407915, Inf, 5.735)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 3.607649113317493, Inf, 10.58)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 3.6387680482901374, Inf, 15.342)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 3.6488623014148702, Inf, 20.089)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 3.6671640109136137, Inf, 24.795)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 3.6730828391081825, Inf, 29.653)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1367, 3.6879790879999557, 3.9047631400484315, 34.552)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1495, 3.6993578668260816, 3.8348878845188743, 39.384)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1615, 3.708661784882423, 3.8348878845188743, 44.316)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1733, 3.719155716746402, 3.8348878845188743, 49.25)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1843, 3.7257200463983495, 3.8348878845188743, 54.245)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1957, 3.7330516401598253, 3.8348878845188743, 59.274)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2067, 3.739970705056011, 3.8348878845188743, 64.192)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2183, 3.7491435944511378, 3.8348878845188743, 69.064)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2287, 3.7537486141482197, 3.832436537430264, 73.985)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2389, 3.7599854283056025, 3.832436537430264, 78.89)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2489, 3.7658921574492434, 3.832436537430264, 83.935)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2587, 3.7718236709359774, 3.832436537430264, 88.82)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2683, 3.7759566651036764, 3.832436537430264, 93.895)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2777, 3.779987086436155, 3.832436537430264, 98.847)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2869, 3.7845058248372987, 3.832436537430264, 103.908)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2961, 3.7887591984474964, 3.832436537430264, 108.862)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3047, 3.791241458325876, 3.832436537430264, 113.931)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3137, 3.7940263631708087, 3.832436537430264, 119.143)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3231, 3.7974793226988957, 3.832436537430264, 124.126)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3321, 3.799972117299394, 3.832436537430264, 128.984)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3411, 3.802103742658221, 3.832436537430264, 133.852)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3491, 3.8056677739594598, 3.832436537430264, 138.749)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3577, 3.8086086398171024, 3.832436537430264, 143.7)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3657, 3.811347002088885, 3.832436537430264, 148.928)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3733, 3.8136124002664524, 3.832436537430264, 154.023)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 3803, 3.8165369566352556, 3.832436537430264, 158.952)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 3879, 3.8193037597519357, 3.832436537430264, 163.951)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 3967, 3.8207772421463364, 3.832436537430264, 168.988)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 4041, 3.8234154738667914, 3.832436537430264, 173.991)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 4119, 3.8243358393384335, 3.832436537430264, 179.383)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 4203, 3.8258794694432128, 3.832436537430264, 184.532)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 4279, 3.827826512434077, 3.832436537430264, 189.393)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 4345, 3.829589704343779, 3.832436537430264, 194.412)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 4407, 3.8314499367904777, 3.832436537430264, 199.547)
(status, bnb_model.incumbent) = ("Optimal", 3.832436537430264)
