
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(example, seed, num_v) = ("neos5", 2, 7)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -5.031517811980502, Inf, 2.442)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -4.898912056061043, Inf, 3.92)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, -4.8147599431557815, Inf, 5.439)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, -4.759548120352053, Inf, 6.87)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, -4.712972218565971, Inf, 8.291)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, -4.68280178064254, Inf, 9.803)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, -4.649433700439351, Inf, 11.221)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, -4.626371193056585, Inf, 12.745)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, -4.609177850467866, Inf, 14.159)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, -4.591349268130638, Inf, 15.57)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, -4.56969895377068, Inf, 17.059)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, -4.549092475690418, Inf, 18.472)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, -4.535688926043444, Inf, 19.951)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2753, -4.521995986708764, -4.423288944836649, 21.37)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2817, -4.508169305986809, -4.423288944836649, 22.78)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2885, -4.496139309759325, -4.423288944836649, 24.298)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2939, -4.4842967195136065, -4.423288944836649, 25.701)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2987, -4.470494178919973, -4.423288944836649, 27.097)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3037, -4.462911990861141, -4.423288944836649, 28.601)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3081, -4.454383498595515, -4.423288944836649, 30.003)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3117, -4.4447116526813595, -4.423288944836649, 31.385)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3143, -4.435165091462611, -4.423288944836649, 32.893)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3167, -4.427052059249922, -4.423288944836649, 34.293)
