
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (5, 25)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 5.7651007917502906, Inf, 5.404)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 5.815149114108151, Inf, 10.077)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 5.84659567992888, Inf, 14.895)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 5.879289415107809, Inf, 19.83)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 5.895754852836075, Inf, 24.798)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1193, 5.912966643639725, 6.097199524715769, 29.655)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1301, 5.928120225663064, 6.097199524715769, 34.461)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1407, 5.937169886684581, 6.097199524715769, 39.215)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1507, 5.943850571662382, 6.097199524715769, 44.201)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1609, 5.950739381671503, 6.097199524715769, 49.049)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1715, 5.958251130989018, 6.097199524715769, 53.967)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1815, 5.963675336625616, 6.097199524715769, 58.787)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1915, 5.970925907641195, 6.097199524715769, 63.582)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2015, 5.975747342977901, 6.097199524715769, 68.412)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2117, 5.979330849153737, 6.097199524715769, 73.139)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2217, 5.986661000755181, 6.097199524715769, 78.001)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2317, 5.9918612191282286, 6.097199524715769, 83.081)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2417, 5.995372758972747, 6.097199524715769, 87.855)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2517, 6.00181833420102, 6.097199524715769, 92.888)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2617, 6.004070412944253, 6.097199524715769, 97.906)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2717, 6.006719035250479, 6.097199524715769, 102.629)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2817, 6.008694877634222, 6.097199524715769, 107.374)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2917, 6.012475799922892, 6.097199524715769, 112.216)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3017, 6.016388958164942, 6.097199524715769, 117.411)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3117, 6.020113094027234, 6.097199524715769, 122.457)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3217, 6.0215837984715055, 6.097199524715769, 127.56)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3317, 6.025456094157162, 6.097199524715769, 132.561)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3417, 6.027600694968631, 6.097199524715769, 137.435)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3517, 6.030052441747025, 6.097199524715769, 142.348)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3617, 6.031407067277573, 6.097199524715769, 147.196)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3717, 6.034233818570754, 6.097199524715769, 152.159)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 3817, 6.036941568912751, 6.097199524715769, 157.195)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 3917, 6.040905047139059, 6.097199524715769, 161.988)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 4017, 6.043441733100062, 6.097199524715769, 166.937)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 4113, 6.047225064259904, 6.097199524715769, 172.046)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 4211, 6.048057431334372, 6.097199524715769, 177.173)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 4311, 6.050012662985412, 6.097199524715769, 182.32)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 4409, 6.051915341630828, 6.097199524715769, 187.443)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 4509, 6.054213314398669, 6.097199524715769, 192.411)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 4609, 6.056684780032347, 6.097199524715769, 197.257)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 4709, 6.058615040780201, 6.097199524715769, 202.198)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 4809, 6.060639978450042, 6.097199524715769, 207.112)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 4909, 6.062513972708493, 6.097199524715769, 212.334)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 5007, 6.063605252978113, 6.097199524715769, 217.362)
(status, bnb_model.incumbent) = ("Optimal", 6.063690033837794)
