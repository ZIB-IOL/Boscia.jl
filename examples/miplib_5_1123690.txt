
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (5, 110, "integer")
seed = 5
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.4390425426356415, Inf, 2.606)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 1.8398715068908351, Inf, 3.677)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 6.380049982128949, Inf, 5.299)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 7.747839876774163, Inf, 7.024)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 8.515342881016855, Inf, 8.671)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 9.435117650295767, Inf, 10.363)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 10.027016306270713, Inf, 11.951)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 10.582505350008628, Inf, 13.505)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 10.854560437934158, Inf, 15.061)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 11.29554222106852, Inf, 16.646)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2199, 11.677260700615573, 21.338665344199633, 18.182)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2331, 11.957559414197755, 21.338665344199633, 19.674)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2457, 12.231566944186483, 21.338665344199633, 21.27)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2587, 12.4745873413696, 21.338665344199633, 22.86)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2711, 12.66101475880989, 21.338665344199633, 24.441)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2833, 12.881115997519775, 21.338665344199633, 25.884)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2957, 13.048738283932918, 21.338665344199633, 27.469)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3083, 13.235839754428964, 21.338665344199633, 29.05)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3195, 13.416551660018115, 21.338665344199633, 30.529)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3313, 13.605257968916652, 21.338665344199633, 32.035)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3431, 13.845439172712393, 21.338665344199633, 33.565)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3547, 14.01043440964009, 21.338665344199633, 35.1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3663, 14.18282628693264, 21.338665344199633, 36.689)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3777, 14.350314202102533, 21.338665344199633, 38.104)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3883, 14.558796877580138, 21.338665344199633, 39.52)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3985, 14.713559212092907, 21.338665344199633, 40.986)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4095, 14.872493659342577, 21.338665344199633, 42.386)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 4207, 14.978386972001138, 21.338665344199633, 43.879)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 4321, 15.088150199216546, 21.338665344199633, 45.326)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 4429, 15.288837860361598, 21.338665344199633, 46.869)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 4545, 15.411857374191163, 21.338665344199633, 48.331)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 4659, 15.508577241690254, 21.338665344199633, 49.893)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 4765, 15.591771240634579, 21.338665344199633, 51.479)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 4871, 15.698434125278501, 21.338665344199633, 52.976)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 4979, 15.867635261086903, 21.338665344199633, 54.432)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 5083, 15.957499938845684, 21.338665344199633, 55.936)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 5191, 16.065627346538232, 21.338665344199633, 57.438)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 5299, 16.168859407679022, 21.338665344199633, 58.847)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 5399, 16.2914026755124, 21.338665344199633, 60.18)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 5503, 16.411170978453633, 21.338665344199633, 61.655)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 5609, 16.504631730710422, 21.338665344199633, 62.935)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 5719, 16.58719488949889, 21.338665344199633, 64.396)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 5827, 16.663294145342064, 21.338665344199633, 65.813)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 5933, 16.74401651715725, 21.338665344199633, 67.177)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 6041, 16.813613189166954, 21.338665344199633, 68.659)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 6151, 16.903281379372157, 21.338665344199633, 70.174)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 6261, 17.0063494704149, 21.338665344199633, 71.637)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 6365, 17.126036195763255, 21.338665344199633, 73.084)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 6465, 17.193627233538756, 21.338665344199633, 74.531)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 6565, 17.278428846347584, 21.338665344199633, 75.908)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 6665, 17.33927572328785, 21.338665344199633, 77.234)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 6771, 17.423756483310516, 21.338665344199633, 78.656)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 6875, 17.526702677562046, 21.338665344199633, 80.164)
build optimizer
