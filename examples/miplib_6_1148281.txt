
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (6, 20, 1.0, 20.0, 1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 0.6089489782246778, Inf, 31.055)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 389, 0.6089739834321283, 0.6767462084961575, 63.92)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 581, 0.608989379848452, 0.6766823212333796, 96.94)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 761, 0.6090113638483172, 0.6762352368398407, 130.009)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 947, 0.6090316795165388, 0.676178769797852, 163.011)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1125, 0.6090496978118525, 0.676178769797852, 195.712)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1303, 0.6090696231229701, 0.676178769797852, 229.188)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1487, 0.6090795648577423, 0.6746231181321358, 261.897)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1665, 0.6090912314974881, 0.6746231181321358, 295.208)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1847, 0.6091054430253172, 0.6746231181321358, 328.464)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2033, 0.6091136274444762, 0.6746231181321358, 361.71)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2207, 0.6091242396467894, 0.6746129410516496, 394.825)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2389, 0.6091324718518447, 0.6746129410516496, 429.345)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2575, 0.6091397886762269, 0.6746129410516496, 462.615)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2745, 0.6091500242928304, 0.6742491842043207, 495.863)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2933, 0.6091548705719216, 0.6742491842043207, 529.226)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3111, 0.6091635406983653, 0.6742491842043207, 562.782)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3285, 0.6091707932046259, 0.6742491842043207, 596.263)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3451, 0.6091784982112038, 0.6742491842043207, 629.298)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3633, 0.6091831602873108, 0.6742491842043207, 662.753)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3825, 0.6091866734417959, 0.6742491842043207, 696.231)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3999, 0.6091927170061102, 0.6742491842043207, 729.939)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4165, 0.6091992451334165, 0.6742491842043207, 763.764)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4347, 0.609204395031505, 0.6742491842043207, 797.338)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4521, 0.6092081917402261, 0.6742491842043207, 830.183)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4709, 0.6092121755967298, 0.6742491842043207, 863.528)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4885, 0.6092171264511057, 0.6742481185855353, 897.302)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5043, 0.6092218276605217, 0.6742462571336538, 930.528)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5221, 0.6092272515658855, 0.6741708929848451, 964.013)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5399, 0.6092324243657524, 0.6741708929848451, 997.457)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5585, 0.6092358200145563, 0.6741708929848451, 1030.704)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5759, 0.6092406057573234, 0.6741708929848451, 1063.885)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 5931, 0.6092449781031184, 0.6741328201961296, 1097.402)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6095, 0.60925058186198, 0.6741328201961296, 1130.596)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6285, 0.6092524196340643, 0.6741328201961296, 1163.823)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6459, 0.6092567503771973, 0.6741328201961296, 1197.13)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6635, 0.6092607919033165, 0.6741328201961296, 1230.853)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 6805, 0.6092646028030428, 0.6741328201961296, 1263.646)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 6975, 0.6092694818036098, 0.6741328201961296, 1297.167)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 7153, 0.6092732876740431, 0.6741328201961296, 1330.777)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 7319, 0.6092782287780236, 0.6741328201961296, 1363.666)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 7501, 0.6092805435394094, 0.6741328201961296, 1396.759)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 7679, 0.6092843982854617, 0.6741328201961296, 1430.321)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 7841, 0.6092877951773725, 0.6741328201961296, 1463.506)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 8035, 0.6092893718351371, 0.6741328201961296, 1497.168)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 8187, 0.6092941683328609, 0.6741328201961296, 1530.408)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 8357, 0.6092979108743293, 0.6741328201961296, 1563.645)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 8529, 0.6093017448832969, 0.6741328201961296, 1597.13)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 8705, 0.6093046735209241, 0.6741328201961296, 1630.295)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 8885, 0.6093080308202333, 0.6741328201961296, 1663.577)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 9047, 0.6093126784855696, 0.6741328201961296, 1696.661)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 9225, 0.6093152258444721, 0.6741328201961296, 1729.857)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 9401, 0.6093175893490395, 0.6741328201961296, 1763.494)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5400, 9569, 0.6093208054301626, 0.6741328201961296, 1796.459)
