
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (7, 20, 1.0, 20.0, 1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 195, 0.6092646121014271, 0.6668714997935657, 31.134)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 377, 0.609321025139863, 0.6659399091532588, 64.102)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 553, 0.6093587279337453, 0.6650081893934122, 96.584)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 737, 0.6093739841962877, 0.6650081893934122, 129.5)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 903, 0.6094121472874902, 0.6650081893934122, 161.976)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1083, 0.6094245512030191, 0.6650081893934122, 194.934)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1267, 0.6094334559297818, 0.6639837693286731, 227.873)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1451, 0.6094442648468166, 0.6639837693286731, 260.913)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1613, 0.6094688665021853, 0.6639837693286731, 293.187)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1777, 0.6094828347657864, 0.6639837693286731, 325.863)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1951, 0.6094889306471383, 0.6639837693286731, 358.633)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2131, 0.6094942632255309, 0.6639837693286731, 391.164)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2311, 0.6095008888899198, 0.6639837693286731, 424.195)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2491, 0.6095058983495506, 0.6639837693286731, 457.006)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2657, 0.6095165449311252, 0.6639837693286731, 490.601)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2827, 0.6095238677710839, 0.6639837693286731, 523.464)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2991, 0.6095312119394759, 0.6639837693286731, 555.818)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3161, 0.6095376868383438, 0.6619114799411828, 588.853)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3341, 0.6095414356761515, 0.6619114799411828, 621.818)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3507, 0.6095463375981379, 0.6619114799411828, 654.379)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3681, 0.6095519851385424, 0.6619114799411828, 687.244)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3863, 0.6095547315708666, 0.6619114799411828, 720.31)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4031, 0.6095589518335816, 0.6619114799411828, 753.275)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4201, 0.6095637174641698, 0.6619114799411828, 786.171)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4373, 0.6095686934030936, 0.6619114799411828, 819.022)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4549, 0.6095721461823913, 0.6619114799411828, 852.102)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4713, 0.6095780370908099, 0.6619114799411828, 884.891)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 4879, 0.6095850583838057, 0.6619114799411828, 917.774)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5047, 0.609589464421762, 0.6619114799411828, 950.568)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5215, 0.6095944122409312, 0.6619114799411828, 983.54)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5379, 0.6095985765234515, 0.6619114799411828, 1016.322)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5557, 0.6096006953292594, 0.6619114799411828, 1049.415)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 5733, 0.6096032573074229, 0.6619114799411828, 1082.384)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 5901, 0.6096079234796115, 0.6619114799411828, 1115.251)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6079, 0.6096101129165521, 0.6619114799411828, 1148.197)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6257, 0.6096124058722235, 0.6619114799411828, 1181.395)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6429, 0.6096150504511857, 0.6619114799411828, 1214.439)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 6605, 0.6096178447557099, 0.6619114799411828, 1247.507)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 6779, 0.609621860322455, 0.6619114799411828, 1280.516)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 6953, 0.6096250707701493, 0.6619114799411828, 1313.38)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 7127, 0.6096277994039193, 0.6619114799411828, 1346.248)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 7301, 0.609630730597535, 0.6619114799411828, 1379.368)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 7451, 0.6096372151521872, 0.6619114799411828, 1411.842)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 7625, 0.6096400639731185, 0.6619114799411828, 1444.957)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 7787, 0.609644657543257, 0.6619114799411828, 1477.617)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 7949, 0.6096502849469275, 0.6619114799411828, 1510.593)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 8127, 0.6096512993861077, 0.6619114799411828, 1543.946)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 8289, 0.6096552886258619, 0.6619114799411828, 1576.686)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 8463, 0.6096589797509784, 0.6619114799411828, 1609.551)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 8637, 0.6096612411240814, 0.6619114799411828, 1642.488)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 8811, 0.6096645028362975, 0.6619114799411828, 1675.589)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 8991, 0.6096655019441412, 0.6619114799411828, 1708.586)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 9165, 0.6096672873938704, 0.6619114799411828, 1741.646)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5400, 9335, 0.6096698815960663, 0.6619114799411828, 1774.879)
