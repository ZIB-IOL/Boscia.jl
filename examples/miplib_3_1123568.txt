
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (3, 50, "integer")
seed = 3
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -1.08068183682869, Inf, 1.931)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -0.5481582214415448, Inf, 2.759)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, -0.15675996094051792, Inf, 3.532)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 0.18027917602477098, Inf, 4.443)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 0.44767394413552414, Inf, 5.217)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 0.6634177525241967, Inf, 5.997)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 0.8426304242614508, Inf, 6.918)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 0.993371117482577, Inf, 7.7)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 1.154898905505052, Inf, 8.474)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1999, 1.252049535858025, 8.67347323887854, 9.263)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2199, 1.3437964674233616, 8.67347323887854, 10.138)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2399, 1.4680953530275929, 8.67347323887854, 10.911)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2599, 1.5666479896153578, 8.67347323887854, 11.675)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2799, 1.6763311374812522, 8.67347323887854, 12.591)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2999, 1.771276947102076, 8.67347323887854, 13.344)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3199, 1.8425599297918862, 8.67347323887854, 14.105)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3399, 1.912333491666573, 8.67347323887854, 14.847)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3599, 1.9709856683862639, 8.67347323887854, 15.727)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3799, 2.0293265223892756, 8.67347323887854, 16.499)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3999, 2.078629472186729, 8.67347323887854, 17.268)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4199, 2.1407378702072095, 8.67347323887854, 18.032)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4397, 2.203739481897867, 8.67347323887854, 18.922)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4597, 2.2599938933617785, 8.67347323887854, 19.669)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4783, 2.2941547691097925, 6.877596700561528, 20.399)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4975, 2.3439448737146047, 6.877596700561528, 21.144)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5171, 2.3877384405871704, 6.877596700561528, 22.033)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5365, 2.455658022785503, 6.877596700561528, 22.782)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5557, 2.5218001449935175, 6.877596700561528, 23.539)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5737, 2.5695625494995635, 6.877596700561528, 24.419)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5927, 2.60562810528568, 6.877596700561528, 25.191)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 6121, 2.638110524191958, 6.877596700561528, 25.961)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 6303, 2.6711412822442924, 6.877596700561528, 26.697)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6483, 2.708439501000022, 6.877596700561528, 27.551)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6673, 2.7471368506092677, 6.877596700561528, 28.313)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6849, 2.7810425594183137, 6.877596700561528, 29.05)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 7027, 2.806894311132842, 6.877596700561528, 29.763)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 7205, 2.8456751011950665, 6.877596700561528, 30.632)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7395, 2.8721911139813305, 6.877596700561528, 31.38)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7577, 2.8952316752603164, 6.877596700561528, 32.102)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 7751, 2.9202098045990628, 6.877596700561528, 32.846)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 7931, 2.943662344284906, 6.877596700561528, 33.721)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 8115, 2.9781996100270858, 6.877596700561528, 34.497)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 8297, 3.0079752898867493, 6.877596700561528, 35.245)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 8477, 3.0325440557773455, 6.877596700561528, 35.959)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 8655, 3.0531364208838836, 6.877596700561528, 36.833)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 8833, 3.084127246670326, 6.877596700561528, 37.574)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 9003, 3.1075114958031382, 6.877596700561528, 38.302)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 9157, 3.13961187850502, 6.877596700561528, 39.008)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 9343, 3.163431801900713, 6.877596700561528, 39.88)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 9503, 3.1891678531480414, 6.877596700561528, 40.631)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 9687, 3.2087031673492517, 6.877596700561528, 41.363)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 9865, 3.236098983267254, 6.877596700561528, 42.086)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 10033, 3.2588509535341794, 6.877596700561528, 42.926)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5400, 10201, 3.2881611682042675, 6.877596700561528, 43.627)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5500, 10373, 3.310540497038009, 6.877596700561528, 44.369)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5600, 10543, 3.3308218345291647, 6.877596700561528, 45.104)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5700, 10715, 3.361439878430244, 6.877596700561528, 45.982)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5800, 10889, 3.3826175404343553, 6.877596700561528, 46.72)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5900, 11047, 3.4031916493151764, 6.877596700561528, 47.442)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6000, 11207, 3.4303080940932182, 6.877596700561528, 48.176)
build optimizer
