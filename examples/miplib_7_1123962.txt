
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (7, 18)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 3.239302075992394, Inf, 4.355)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 3.3160769454980863, Inf, 7.814)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 3.3375861998607435, Inf, 11.207)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 799, 3.358882640011963, 3.6119239437869375, 14.686)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 919, 3.370076466383001, 3.5346465199790775, 18.016)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1033, 3.3798438013301797, 3.5076015317657423, 21.324)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1143, 3.3925942205175463, 3.491752708140318, 24.74)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1249, 3.4011871890700935, 3.491752708140318, 28.122)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1349, 3.4088483412572965, 3.491752708140318, 31.468)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1449, 3.4173162600740645, 3.491752708140318, 34.864)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1549, 3.4233067692365857, 3.491752708140318, 38.167)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1649, 3.4293891825199005, 3.491752708140318, 41.616)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1749, 3.435198216495032, 3.491752708140318, 44.983)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1847, 3.440752486441417, 3.491752708140318, 48.498)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 1947, 3.4444496775506814, 3.491752708140318, 51.831)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2047, 3.4482789513831453, 3.491752708140318, 55.258)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2139, 3.4516963009899264, 3.491752708140318, 58.739)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2229, 3.455472162813828, 3.491752708140318, 62.216)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2323, 3.458280035914846, 3.491752708140318, 65.707)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2419, 3.4608094220759864, 3.491752708140318, 69.16)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2509, 3.464175258483503, 3.491752708140318, 72.613)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2597, 3.467776096564672, 3.491752708140318, 75.958)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2687, 3.4707921610071844, 3.491752708140318, 79.136)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 2773, 3.4739370840151906, 3.491752708140318, 82.5)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 2859, 3.476946683003498, 3.491752708140318, 85.751)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 2933, 3.480872376482922, 3.491752708140318, 89.131)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3011, 3.4831369673463697, 3.491752708140318, 92.512)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3085, 3.486322793710719, 3.491752708140318, 95.937)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3159, 3.488174183968854, 3.491752708140318, 99.222)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3231, 3.490321842769495, 3.491752708140318, 102.583)
(status, bnb_model.incumbent) = ("Optimal", 3.491752708140318)
