
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (2, 40, "integer")
seed = 2
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.3155250035592776, Inf, 1.776)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 0.7402141421245474, Inf, 2.481)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 1.2643758411093913, Inf, 3.142)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 1.821956313320319, Inf, 3.809)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 2.1411494974232235, Inf, 4.626)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 2.474645225094976, Inf, 5.293)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 2.771364130282463, Inf, 5.957)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 2.9884026041977334, Inf, 6.622)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 3.2252001884719066, Inf, 7.405)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 3.4207008513969357, Inf, 8.077)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2199, 3.588822535117436, 9.568124956084333, 8.744)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2379, 3.7674619609141025, 9.568124956084333, 9.383)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2559, 3.898082489703042, 9.568124956084333, 10.162)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2733, 4.015667699077006, 9.568124956084333, 10.812)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2903, 4.152400502410445, 9.568124956084333, 11.454)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3075, 4.261090854283066, 9.568124956084333, 12.096)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3259, 4.364401522821033, 9.568124956084333, 12.74)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3443, 4.457395635768938, 9.568124956084333, 13.544)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3611, 4.534691397705187, 9.568124956084333, 14.19)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3775, 4.602312121316529, 9.568124956084333, 14.83)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3939, 4.68096225548999, 9.568124956084333, 15.493)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4103, 4.785509535842476, 9.568124956084333, 16.262)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4273, 4.854891399346744, 9.568124956084333, 16.935)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4349, 4.928128430142819, 4.983745551952739, 17.561)
build optimizer
