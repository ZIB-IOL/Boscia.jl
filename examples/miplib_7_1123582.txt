
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (7, 55, "integer")
seed = 7
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.7184415448805643, Inf, 1.913)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -0.1589596925703415, Inf, 2.71)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 0.22967442688489953, Inf, 3.609)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 0.40153774217773563, Inf, 4.399)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 0.5813305598108705, Inf, 5.181)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 0.7557908818910269, Inf, 5.948)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 0.8673157588924044, Inf, 6.855)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 0.9802255210774257, Inf, 7.623)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 1.0942584365642092, Inf, 8.378)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 1.1891658180421683, Inf, 9.244)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 1.2627830798498572, Inf, 10.025)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 1.364323259300856, Inf, 10.785)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 1.441024859961311, Inf, 11.657)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 1.5280003852277195, Inf, 12.436)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 1.5981620222763777, Inf, 13.186)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 1.6479391214726782, Inf, 13.947)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 1.7268428875145365, Inf, 14.828)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, 1.7918507785886892, Inf, 15.562)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, 1.8345691823400463, Inf, 16.3)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, 1.8711203148404745, Inf, 17.131)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, 1.9234632949331298, Inf, 17.871)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, 1.9778891373561587, Inf, 18.654)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, 2.033439071435408, Inf, 19.419)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4801, 2.0742537584447063, Inf, 20.3)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 5001, 2.1107545695472494, Inf, 21.072)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5201, 2.155885176838795, Inf, 21.812)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5401, 2.1916917108042617, Inf, 22.55)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5601, 2.2305607291821055, Inf, 23.42)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5801, 2.2658136149130814, Inf, 24.149)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 6001, 2.2948095179548567, Inf, 24.877)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 6201, 2.326304088311411, Inf, 25.724)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 6389, 2.3573486503964514, 5.066836565841663, 26.465)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6555, 2.399783491607808, 5.066836565841663, 27.223)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6713, 2.4371824629544667, 5.066836565841663, 27.963)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 6871, 2.4764105569832244, 5.066836565841663, 28.846)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 7027, 2.5226358324219587, 5.066836565841663, 29.57)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 7191, 2.5560276992729536, 5.066836565841663, 30.314)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7351, 2.5814402875410014, 5.066836565841663, 31.067)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7429, 2.610932637524952, 2.7725842901399638, 31.93)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 7473, 2.640502700606126, 2.7725842901399638, 32.656)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 7531, 2.6725953634879014, 2.7725842901399638, 33.386)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 7573, 2.696887072704042, 2.7725842901399638, 34.114)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 7611, 2.7205132618640846, 2.7725842901399638, 34.99)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 7645, 2.744610961889308, 2.7725842901399638, 35.76)
build optimizer
