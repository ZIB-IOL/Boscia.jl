
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (4, 85, "mixed")
seed = 4
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -8.036859130622954, Inf, 2.373)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -7.668937588894594, Inf, 3.782)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, -7.38155629403548, Inf, 5.08)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, -7.227279472519682, Inf, 6.468)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, -7.064284015497978, Inf, 7.768)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, -6.967801837676672, Inf, 9.137)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, -6.882840934659416, Inf, 10.444)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, -6.814976667611673, Inf, 11.828)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, -6.729997176083523, Inf, 13.125)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, -6.666869388055668, Inf, 14.424)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, -6.599921504959504, Inf, 15.802)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, -6.548404775345993, Inf, 17.083)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, -6.495743831739826, Inf, 18.457)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, -6.450847918773207, Inf, 19.735)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, -6.405744446922936, Inf, 21.088)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, -6.3624735276220745, Inf, 22.388)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, -6.330193248333402, Inf, 23.655)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, -6.300552673866449, Inf, 25.013)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, -6.270582900553461, Inf, 26.285)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, -6.2416359572214075, Inf, 27.671)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, -6.213870632559702, Inf, 28.937)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, -6.18701358798597, Inf, 30.275)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, -6.16157205934198, Inf, 31.546)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4801, -6.137963416689738, Inf, 32.817)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 5001, -6.111472215484599, Inf, 34.195)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5201, -6.091099774576072, Inf, 35.468)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5401, -6.070001767834012, Inf, 36.828)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5601, -6.052371584814655, Inf, 38.114)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5801, -6.033009074379116, Inf, 39.399)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 6001, -6.006066049445316, Inf, 40.768)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 6201, -5.97897647526042, Inf, 42.049)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 6401, -5.958373688803533, Inf, 43.412)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6601, -5.938501111850137, Inf, 44.678)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6801, -5.919275680629134, Inf, 45.948)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 7001, -5.898144520497313, Inf, 47.326)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 7201, -5.882934135836722, Inf, 48.601)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 7401, -5.864376024106043, Inf, 49.936)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7601, -5.8454587495378645, Inf, 51.213)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7801, -5.830581559793917, Inf, 52.489)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 8001, -5.816415424833014, Inf, 53.86)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 8201, -5.8016448792400475, Inf, 55.12)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 8401, -5.7827532133850905, Inf, 56.456)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 8601, -5.76634828924671, Inf, 57.746)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 8801, -5.753535567012197, Inf, 59.01)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 9001, -5.736849187680893, Inf, 60.361)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 9201, -5.722259505854596, Inf, 61.616)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 9401, -5.708981275006218, Inf, 62.892)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 9601, -5.695825701086715, Inf, 64.263)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 9801, -5.68456055692607, Inf, 65.498)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 10001, -5.674251526561078, Inf, 66.864)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 10201, -5.663297476953506, Inf, 68.139)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 10401, -5.650475645523864, Inf, 69.391)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 10601, -5.636322458499682, Inf, 70.744)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5400, 10801, -5.624058718395264, Inf, 72.006)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5500, 11001, -5.615132309528415, Inf, 73.28)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5600, 11201, -5.605847532224425, Inf, 74.668)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5700, 11401, -5.595755525400546, Inf, 75.964)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5800, 11601, -5.587558391185285, Inf, 77.332)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5900, 11801, -5.57770514781336, Inf, 78.598)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6000, 11855, -5.569373279007674, -5.462420722318915, 79.862)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6100, 11905, -5.55849616046264, -5.462420722318915, 81.252)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6200, 11941, -5.548716055852669, -5.462420722318915, 82.505)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6300, 11983, -5.53745255543342, -5.462420722318915, 83.74)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6400, 12019, -5.527172555558674, -5.462420722318915, 85.09)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6500, 12063, -5.517267877816092, -5.462420722318915, 86.35)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6600, 12089, -5.509433296567829, -5.462420722318915, 87.608)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6700, 12131, -5.500157473048326, -5.462420722318915, 88.862)
build optimizer
