
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (2, 105, "integer")
seed = 2
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.010502909188235585, Inf, 2.5)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 6.6689769973288096, Inf, 3.433)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 20.37464352396641, Inf, 4.864)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 729, 21.5783748853595, 36.08845480864263, 6.289)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 835, 23.226799889847694, 36.08845480864263, 7.659)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 939, 24.402563668503294, 36.08845480864263, 9.133)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1039, 25.281583524414522, 36.08845480864263, 10.522)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1139, 25.941734147547738, 36.08845480864263, 11.927)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1239, 26.675064839213743, 36.08845480864263, 13.282)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1339, 27.335403073067425, 36.08845480864263, 14.629)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1439, 28.015249481852486, 36.08845480864263, 15.961)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1539, 28.60696531600755, 36.08845480864263, 17.284)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1639, 29.004827072828633, 36.08845480864263, 18.506)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1739, 29.457921250872683, 36.08845480864263, 19.846)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 1839, 29.779252601831818, 36.08845480864263, 21.195)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 1939, 30.270923962020255, 36.08845480864263, 22.331)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2039, 30.63179332508911, 36.08845480864263, 23.483)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2139, 31.025298192711126, 36.08845480864263, 24.743)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2239, 31.375939546626178, 36.08845480864263, 25.969)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2339, 31.688980034603194, 36.08845480864263, 27.128)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2439, 31.92149881837715, 36.08845480864263, 28.323)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2539, 32.31050767984811, 36.08845480864263, 29.44)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2639, 32.80828666168493, 36.08845480864263, 30.695)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 2737, 33.03518858086876, 36.08845480864263, 31.87)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 2835, 33.32410001100794, 36.08845480864263, 33.033)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 2935, 33.58246228736401, 36.08845480864263, 34.161)
build optimizer
