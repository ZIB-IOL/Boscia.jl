
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (8, 110, "integer")
seed = 8
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.11167514991600226, Inf, 2.62)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 3.372522836654971, Inf, 3.632)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 20.101657339307177, Inf, 5.165)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 22.0861369404615, Inf, 6.754)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 23.088794735376773, Inf, 8.31)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 24.129776309704884, Inf, 9.837)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 25.12875343919625, Inf, 11.369)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1561, 25.98562911136822, 38.211890463702254, 12.894)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1663, 26.60149388284799, 38.211890463702254, 14.39)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1763, 27.390607625158808, 38.211890463702254, 15.847)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1863, 28.1077489977685, 38.211890463702254, 17.284)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1963, 28.720405573574165, 38.211890463702254, 18.61)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2063, 29.15634488661752, 38.211890463702254, 19.849)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2163, 29.717872192887288, 38.211890463702254, 21.202)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2263, 30.141556611082155, 38.211890463702254, 22.474)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2363, 30.40021458170601, 38.211890463702254, 23.785)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2463, 30.714959681867978, 38.211890463702254, 25.171)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2563, 31.00846803940137, 38.211890463702254, 26.52)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2663, 31.301110797089628, 38.211890463702254, 27.682)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2763, 31.727894728234205, 38.211890463702254, 28.949)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2863, 31.97317584197775, 38.211890463702254, 30.187)
build optimizer
