
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (2, 20)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 1.4851956470250027, Inf, 5.102)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 1.5369423777389069, Inf, 9.148)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 1.5616818248211874, Inf, 13.163)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 1.5795861848181532, Inf, 17.122)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 969, 1.5919353526997537, 1.7382647337699126, 21.213)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1077, 1.5998767005362606, 1.7382647337699126, 25.375)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1185, 1.6080039644081225, 1.7382647337699126, 29.289)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1287, 1.617250439328033, 1.7382647337699126, 33.175)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1389, 1.6226380925145452, 1.734647142069034, 37.139)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1489, 1.6283830065442455, 1.734647142069034, 41.23)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1595, 1.6348412830142542, 1.734647142069034, 45.371)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1697, 1.638070609528026, 1.734647142069034, 49.498)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1797, 1.6434509194701445, 1.734647142069034, 53.578)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1897, 1.646751231100901, 1.734647142069034, 57.583)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 1997, 1.6526252263241976, 1.734647142069034, 61.552)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2097, 1.6558430639395445, 1.734647142069034, 65.673)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2197, 1.6582801130411688, 1.734647142069034, 69.944)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2295, 1.6616653065606573, 1.734647142069034, 74.063)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2397, 1.6642749980837184, 1.734647142069034, 78.205)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2497, 1.6677145558333233, 1.734647142069034, 82.201)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2597, 1.6703003768658156, 1.734647142069034, 86.4)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2697, 1.67564452077717, 1.734647142069034, 90.303)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2797, 1.6781010229810405, 1.734647142069034, 94.422)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 2897, 1.6806340687584689, 1.734647142069034, 98.404)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 2995, 1.6828566764970334, 1.711630373313791, 102.352)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3093, 1.6845102930559819, 1.711630373313791, 106.412)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3191, 1.6873296163107112, 1.711630373313791, 110.472)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3291, 1.6901612703967424, 1.711630373313791, 114.626)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3383, 1.692730929520613, 1.711630373313791, 118.66)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3483, 1.6937404369370328, 1.711630373313791, 122.687)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3575, 1.6957585826909305, 1.711630373313791, 126.601)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 3673, 1.6977572759420865, 1.711630373313791, 130.639)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 3765, 1.6984097094477435, 1.711630373313791, 134.843)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 3851, 1.7000608229793588, 1.711630373313791, 138.888)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 3935, 1.7023378063539085, 1.711630373313791, 143.129)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 4021, 1.7039987061678503, 1.711630373313791, 147.445)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 4097, 1.705877435889816, 1.711630373313791, 151.535)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 4179, 1.7078805689322547, 1.711630373313791, 155.755)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 4243, 1.7097508798319072, 1.711630373313791, 159.991)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 4311, 1.7112852703675625, 1.711630373313791, 164.086)
(status, bnb_model.incumbent) = ("Optimal", 1.711630373313791)
