
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (4, 30)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 5.424978720715656, Inf, 6.849)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 5.474850246613224, Inf, 12.64)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 5.496592460485774, Inf, 18.41)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 5.517333960265079, Inf, 24.253)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 5.529931493583517, Inf, 30.104)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 5.537728497171524, Inf, 35.87)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 5.545251655746125, Inf, 41.881)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 5.559254203526279, Inf, 48.139)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 5.573864334985561, Inf, 54.44)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 5.58725114250783, Inf, 60.461)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 5.595917242958904, Inf, 66.913)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 5.603728053196513, Inf, 73.752)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 5.611350880349891, Inf, 80.557)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 5.62253195370848, Inf, 86.871)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 5.6310940253186335, Inf, 93.332)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 5.635871213131723, Inf, 100.079)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 5.641304282737001, Inf, 106.401)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3523, 5.646459769482367, 5.827463727122692, 112.964)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3625, 5.651721502602921, 5.827463727122692, 119.623)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3729, 5.655971077134353, 5.827463727122692, 126.149)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3833, 5.660398870683748, 5.827463727122692, 132.983)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3933, 5.664980597064373, 5.827463727122692, 139.608)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4033, 5.669154891215075, 5.827463727122692, 146.731)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4133, 5.674243608657589, 5.827463727122692, 153.676)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4235, 5.67786958144253, 5.827463727122692, 160.362)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4337, 5.6810504891399, 5.827463727122692, 167.266)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4437, 5.685546910417537, 5.827463727122692, 173.902)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 4537, 5.689537947754728, 5.827463727122692, 180.371)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 4637, 5.6920223358186135, 5.827463727122692, 187.041)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 4741, 5.694831324118348, 5.827463727122692, 194.04)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 4843, 5.697383529294171, 5.827463727122692, 200.857)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 4943, 5.700991681950151, 5.827463727122692, 207.363)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 5045, 5.704988522446689, 5.827463727122692, 213.953)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 5145, 5.707991020234984, 5.827463727122692, 220.914)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 5245, 5.710475092243102, 5.827463727122692, 227.733)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 5345, 5.712232539445344, 5.827463727122692, 234.686)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 5445, 5.714255568282921, 5.827463727122692, 241.631)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 5545, 5.717034399451998, 5.827463727122692, 248.41)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 5645, 5.719177237001988, 5.827463727122692, 255.019)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 5745, 5.72136290877909, 5.827463727122692, 261.771)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 5845, 5.724044514713254, 5.827463727122692, 268.554)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 5945, 5.7259035734189885, 5.827463727122692, 275.146)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 6045, 5.728252702263144, 5.827463727122692, 281.867)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 6145, 5.730128868469178, 5.827463727122692, 288.52)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 6245, 5.7330729399640665, 5.827463727122692, 295.612)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 6345, 5.734591219426996, 5.827463727122692, 302.809)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 6447, 5.736618444568099, 5.827463727122692, 310.053)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 6547, 5.740093839531462, 5.827463727122692, 316.429)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 6647, 5.742156241978412, 5.827463727122692, 322.954)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 6747, 5.74388200792866, 5.827463727122692, 332.372)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 6847, 5.745960025594019, 5.827463727122692, 339.003)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 6947, 5.747620016768125, 5.827463727122692, 345.742)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 7047, 5.7497726530934115, 5.827463727122692, 352.251)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5400, 7147, 5.751308086530648, 5.827463727122692, 359.0)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5500, 7247, 5.7525066601823935, 5.827463727122692, 365.743)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5600, 7347, 5.75386864815322, 5.827463727122692, 372.684)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5700, 7445, 5.755578978958307, 5.827463727122692, 379.474)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5800, 7545, 5.756798182205684, 5.827463727122692, 385.932)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5900, 7645, 5.758554845552922, 5.827463727122692, 392.63)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6000, 7745, 5.7595782522958965, 5.827463727122692, 399.386)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6100, 7845, 5.761042811447944, 5.827463727122692, 406.159)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6200, 7945, 5.76201330361799, 5.827463727122692, 412.842)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6300, 8045, 5.762897668347402, 5.827463727122692, 419.795)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6400, 8145, 5.763722563168217, 5.827463727122692, 426.911)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (6500, 8245, 5.765233622944911, 5.827463727122692, 433.335)
(status, bnb_model.incumbent) = ("Optimal", 5.765371069823552)
