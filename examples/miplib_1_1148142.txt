
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (1, 5, 1.0, 5.0, 5)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 145, 0.23260608195072696, 0.34693411478680203, 5.034)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 267, 0.23739727508994013, 0.32758383187420875, 7.145)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 403, 0.23975100514193554, 0.32758383187420875, 9.148)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 537, 0.2425659685392261, 0.32758383187420875, 11.142)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 671, 0.24465075816734447, 0.28788152813949164, 13.178)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 787, 0.24771343261399997, 0.28788152813949164, 15.157)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 915, 0.2498074826457553, 0.28788152813949164, 17.132)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1049, 0.25177982909473273, 0.28788152813949164, 19.135)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1175, 0.25328109169375407, 0.28788152813949164, 21.184)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1303, 0.2543919706975154, 0.28788152813949164, 23.163)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1425, 0.2562777223398207, 0.28788152813949164, 25.162)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1551, 0.2573755759279741, 0.28788152813949164, 27.19)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1693, 0.2583682856323891, 0.2867351130900134, 29.24)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1815, 0.2596848889936334, 0.2867351130900134, 31.236)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 1945, 0.26045932338550887, 0.2867351130900134, 33.22)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2065, 0.2613573692729132, 0.2867351130900134, 35.215)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2197, 0.2619486698752166, 0.2867351130900134, 37.224)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2313, 0.2627422967661217, 0.2867351130900134, 39.188)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2435, 0.26347109606144925, 0.2867351130900134, 41.188)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2561, 0.26416219501220095, 0.2867351130900134, 43.164)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2665, 0.2650514408250963, 0.2867351130900134, 45.107)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2757, 0.26576605323519686, 0.2867351130900134, 47.03)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2843, 0.2662668716520727, 0.2867351130900134, 48.998)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 2955, 0.26679320224033676, 0.2867351130900134, 50.999)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3059, 0.26764432012511263, 0.2867351130900134, 52.97)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3163, 0.26856154962396384, 0.2867351130900134, 54.942)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3251, 0.2690540888612029, 0.2867351130900134, 56.891)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3349, 0.26939600163416144, 0.2867351130900134, 58.872)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3439, 0.2700845952515385, 0.2867351130900134, 60.794)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3541, 0.2707902266908609, 0.2867351130900134, 62.739)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3639, 0.2716524962708971, 0.2867351130900134, 64.675)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 3719, 0.27221476469321615, 0.2867351130900134, 66.603)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 3813, 0.27265688552853395, 0.2867351130900134, 68.563)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 3903, 0.2731961424422513, 0.2867351130900134, 70.491)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 3991, 0.2738886818568451, 0.2867351130900134, 72.44)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 4093, 0.2744520378908647, 0.2867351130900134, 74.373)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 4177, 0.2749006994373854, 0.2867351130900134, 76.311)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 4261, 0.27526808791479734, 0.2867351130900134, 78.273)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 4355, 0.2756022653490366, 0.2867351130900134, 80.181)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 4457, 0.275891972540932, 0.2867351130900134, 82.136)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 4547, 0.27622386468340926, 0.2867351130900134, 84.024)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 4647, 0.2766465177968543, 0.2867351130900134, 85.942)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 4739, 0.2774981287824787, 0.2867351130900134, 87.876)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 4829, 0.2781921866599858, 0.2867351130900134, 89.808)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 4907, 0.2789157837005285, 0.2867351130900134, 91.721)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 4993, 0.27957009988012615, 0.2867351130900134, 93.632)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 5081, 0.28006448191063266, 0.2867351130900134, 95.549)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 5155, 0.2805724725352122, 0.2867351130900134, 97.429)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 5215, 0.28107532712904176, 0.2867351130900134, 99.342)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 5289, 0.2816487833728572, 0.2867351130900134, 101.225)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 5373, 0.28232061742468195, 0.2867351130900134, 103.242)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 5473, 0.283018794630353, 0.2867351130900134, 105.143)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 5553, 0.2835793827780956, 0.2867351130900134, 107.071)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5400, 5605, 0.2844934990796494, 0.2867351130900134, 109.005)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5500, 5665, 0.2851550250926122, 0.2867351130900134, 110.92)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5600, 5709, 0.2857261479853519, 0.2867351130900134, 112.857)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5700, 5737, 0.28639394759624426, 0.2867351130900134, 114.762)
