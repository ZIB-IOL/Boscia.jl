
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, ns) = (1, 70, 1.0)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -38025.65575092976, Inf, 85.01)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, -38025.61216470494, Inf, 165.477)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, -38025.583058992306, Inf, 233.147)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, -38025.54168480441, Inf, 300.958)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, -38025.524163395065, Inf, 368.043)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, -38025.50645322002, Inf, 434.195)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, -38025.489687085435, Inf, 496.336)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, -38025.47765127456, Inf, 557.128)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, -38025.46338345934, Inf, 617.705)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, -38025.45356712903, Inf, 677.399)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, -38025.446489548376, Inf, 737.531)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, -38025.43964139736, Inf, 797.1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, -38025.43351386715, Inf, 856.97)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, -38025.42336088204, Inf, 917.395)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, -38025.41989350126, Inf, 977.096)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, -38025.41702654728, Inf, 1036.836)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, -38025.40866053008, Inf, 1095.786)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, -38025.404454614116, Inf, 1154.983)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, -38025.39273329672, Inf, 1214.163)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, -38025.384901362224, Inf, 1273.975)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, -38025.38134855391, Inf, 1333.262)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, -38025.37736523153, Inf, 1392.147)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, -38025.37139042513, Inf, 1450.233)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4801, -38025.36539654067, Inf, 1509.468)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 5001, -38025.35858969483, Inf, 1568.711)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5201, -38025.35573822006, Inf, 1627.611)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5401, -38025.35035856347, Inf, 1687.273)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5601, -38025.347019114335, Inf, 1746.963)
