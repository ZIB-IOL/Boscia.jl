
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (5, 29)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 6.055299348757488, Inf, 6.363)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 6.106840346490307, Inf, 12.014)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 6.147968358803495, Inf, 17.675)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 6.171019099907032, Inf, 23.549)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 6.186457973558902, Inf, 29.405)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 6.203101605579647, Inf, 35.391)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 6.221913360351849, Inf, 41.168)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 6.230966500694386, Inf, 47.28)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 6.240866549614288, Inf, 53.106)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 6.250450064349704, Inf, 59.175)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 6.259354256986788, Inf, 64.974)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 6.263653895691133, Inf, 71.253)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 6.270733125596004, Inf, 77.117)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 6.276407225662222, Inf, 83.236)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 6.282726227367023, Inf, 89.509)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 6.287944167156716, Inf, 95.347)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 6.29248977669963, Inf, 101.092)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, 6.299717986336014, Inf, 106.887)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, 6.3040786177681865, Inf, 112.598)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, 6.307621969498882, Inf, 118.819)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, 6.313348354532051, Inf, 124.443)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, 6.31892102829166, Inf, 130.419)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, 6.320744903556274, Inf, 136.56)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4801, 6.322992014360036, Inf, 142.375)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 5001, 6.325378045981291, Inf, 148.404)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5201, 6.328843963338821, Inf, 154.505)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5401, 6.331297455652644, Inf, 160.57)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5601, 6.33421039839539, Inf, 166.899)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5801, 6.336524324435368, Inf, 172.822)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 6001, 6.339092926744284, Inf, 178.873)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 6201, 6.3411242969442645, Inf, 185.065)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 6401, 6.3441031027893215, Inf, 191.018)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6601, 6.345209831000712, Inf, 197.356)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6801, 6.347166747686583, Inf, 203.337)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 7001, 6.3494624751391795, Inf, 209.673)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 7201, 6.351637730127512, Inf, 215.917)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 7401, 6.3542066955917225, Inf, 222.185)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7601, 6.358006487918668, Inf, 228.187)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7801, 6.359807640928312, Inf, 234.649)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 8001, 6.361123649190298, Inf, 241.592)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 8201, 6.363959406058614, Inf, 247.874)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 8401, 6.36704245374115, Inf, 254.085)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 8601, 6.369938021826205, Inf, 260.055)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 8801, 6.371531208589182, Inf, 266.698)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 9001, 6.3731498953988375, Inf, 272.801)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 9201, 6.374310829090582, Inf, 278.951)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 9371, 6.3754195293034694, 6.46519762129804, 285.047)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 9471, 6.37692502874072, 6.46519762129804, 291.295)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 9571, 6.379155541810068, 6.46519762129804, 297.333)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 9669, 6.381803048478875, 6.46519762129804, 303.386)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 9769, 6.383260886567263, 6.46519762129804, 309.387)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 9869, 6.386220911615283, 6.46519762129804, 315.522)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 9969, 6.387497305151806, 6.46519762129804, 321.845)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5400, 10069, 6.3882174339560045, 6.46519762129804, 328.194)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5500, 10169, 6.389182819813384, 6.46519762129804, 334.858)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5600, 10265, 6.390213612494771, 6.46519762129804, 341.088)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5700, 10365, 6.391175373135535, 6.46519762129804, 347.248)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5800, 10465, 6.392534843737448, 6.46519762129804, 353.635)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5900, 10565, 6.393880970475617, 6.46519762129804, 359.717)
(status, bnb_model.incumbent) = ("Optimal", 6.393896465410627)
