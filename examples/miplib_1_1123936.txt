
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (1, 16)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 2.126033983845838, Inf, 4.45)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 2.155298166768477, Inf, 7.533)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 591, 2.1753302952503146, 2.2871572227700816, 10.546)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 721, 2.181703878208372, 2.2507055880554483, 13.544)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 835, 2.1885971528163415, 2.2507055880554483, 16.488)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 949, 2.194711090209824, 2.2503008692496866, 19.417)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1055, 2.1996514647802226, 2.2503008692496866, 22.62)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1161, 2.2066278550252316, 2.2503008692496866, 25.587)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1267, 2.2110817958040156, 2.2503008692496866, 28.462)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1369, 2.2155177906663615, 2.2503008692496866, 31.407)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1469, 2.2191753562289174, 2.2503008692496866, 34.409)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1569, 2.2216294297268933, 2.2503008692496866, 37.376)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1667, 2.224287692111648, 2.2503008692496866, 40.52)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1765, 2.225945075904937, 2.2503008692496866, 43.41)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 1861, 2.2284278728412845, 2.2503008692496866, 46.394)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 1953, 2.2311326096172874, 2.2503008692496866, 49.113)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2049, 2.23270278648411, 2.2503008692496866, 52.042)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2139, 2.233942156439258, 2.2503008692496866, 54.982)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2221, 2.236789640314974, 2.2503008692496866, 57.939)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2297, 2.240016936193938, 2.2503008692496866, 60.97)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2385, 2.241291205617197, 2.2503008692496866, 63.989)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2465, 2.242704022756601, 2.2503008692496866, 66.925)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2539, 2.243774827340336, 2.2503008692496866, 69.916)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 2617, 2.2451263900764427, 2.2503008692496866, 72.955)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 2689, 2.2469501484565204, 2.2503008692496866, 76.057)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 2761, 2.248030424519506, 2.2503008692496866, 78.983)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 2809, 2.2502454445705786, 2.2503008692496866, 81.925)
(status, bnb_model.incumbent) = ("Optimal", 2.2503008692496866)
