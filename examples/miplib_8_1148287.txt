
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (8, 20, 0.1, 20.0, 1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 0.6397404324460044, Inf, 35.773)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 0.6398538686242765, Inf, 76.125)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 0.6398601048634573, Inf, 114.277)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 0.6398677265805343, Inf, 153.231)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 0.6399029022981054, Inf, 192.027)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1201, 0.6399124412815994, Inf, 230.963)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1401, 0.6399193989471053, Inf, 271.17)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1601, 0.6399249655583398, Inf, 310.085)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1801, 0.639932136849664, Inf, 350.08)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 2001, 0.6399626697734544, Inf, 390.8)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2201, 0.6399725415302536, Inf, 431.685)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2401, 0.6399771791928371, Inf, 471.811)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2601, 0.6399803413300718, Inf, 511.668)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2801, 0.6399831668315681, Inf, 551.55)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 3001, 0.6399854848328417, Inf, 590.652)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 3201, 0.6399890187011877, Inf, 629.994)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 3401, 0.6399922505041162, Inf, 670.086)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3601, 0.6399956518328055, Inf, 709.615)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3801, 0.6400004166127105, Inf, 748.659)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 4001, 0.6400109523799791, Inf, 788.946)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 4201, 0.6400201296597693, Inf, 830.087)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 4401, 0.6400266711453347, Inf, 871.18)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 4601, 0.6400307718945591, Inf, 911.909)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4801, 0.6400337559743828, Inf, 952.44)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 5001, 0.6400362820360465, Inf, 992.928)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 5201, 0.6400385079197263, Inf, 1033.188)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 5401, 0.6400403161568641, Inf, 1073.124)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 5601, 0.6400418416338072, Inf, 1112.606)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 5801, 0.6400429515434813, Inf, 1151.409)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 6001, 0.6400447987941326, Inf, 1191.56)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 6201, 0.640046631236631, Inf, 1231.773)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 6401, 0.6400479353519533, Inf, 1271.62)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 6601, 0.6400496948891549, Inf, 1311.415)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 6801, 0.6400509906410672, Inf, 1350.887)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 7001, 0.6400532779558966, Inf, 1390.18)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 7201, 0.6400551212551647, Inf, 1429.659)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 7401, 0.6400570250460972, Inf, 1468.581)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 7601, 0.6400601193574477, Inf, 1508.656)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 7801, 0.6400636248935022, Inf, 1549.129)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 8001, 0.6400670759034907, Inf, 1589.725)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 8201, 0.6400705387694812, Inf, 1630.303)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 8401, 0.6400750376982558, Inf, 1670.91)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 8601, 0.6400773976104889, Inf, 1711.656)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 8801, 0.640080495555799, Inf, 1752.344)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 9001, 0.6400842352627799, Inf, 1793.598)
