
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (7, 16)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 3.0086880402329275, Inf, 4.428)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 3.0563421696751343, Inf, 7.718)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 3.081452387157552, Inf, 10.954)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 3.101732510808907, Inf, 14.115)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 997, 3.1152412427473997, 3.4289739286087286, 17.339)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1109, 3.1271085301826913, 3.2907411842047742, 20.629)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1221, 3.138732043335454, 3.2907411842047742, 23.735)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1329, 3.151027285552759, 3.277801324438899, 27.017)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1435, 3.159698479158007, 3.277801324438899, 30.271)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1539, 3.1708022931242565, 3.2775522073416195, 33.439)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1643, 3.1809675967522644, 3.2775522073416195, 36.522)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1747, 3.1854100885059355, 3.2775522073416195, 39.665)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1849, 3.1903931117292097, 3.2775522073416195, 42.918)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 1951, 3.195679725771759, 3.2775522073416195, 46.099)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2051, 3.2005452390467117, 3.2775522073416195, 49.302)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2149, 3.204376601503378, 3.2775522073416195, 52.452)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2249, 3.2110211684866012, 3.2775522073416195, 55.51)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2349, 3.2151898803438272, 3.2775522073416195, 58.61)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2447, 3.2194050565673287, 3.2775522073416195, 61.701)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2547, 3.2237194715859423, 3.2775522073416195, 64.971)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2645, 3.2268997572341056, 3.2775522073416195, 68.14)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 2737, 3.2317867277207397, 3.2775522073416195, 71.282)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 2827, 3.2350804559914565, 3.2775522073416195, 74.583)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 2921, 3.2392825629917543, 3.2775522073416195, 77.68)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3017, 3.240840069949311, 3.2775522073416195, 80.734)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3111, 3.2425646633284435, 3.2775522073416195, 84.031)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3203, 3.244339010020499, 3.2775522073416195, 87.276)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3289, 3.247165337973372, 3.2775522073416195, 90.581)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 3379, 3.2512191759882176, 3.2775522073416195, 93.78)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 3473, 3.252861752502779, 3.2775522073416195, 96.861)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 3567, 3.2540410115825718, 3.2775522073416195, 100.017)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 3659, 3.255707177300096, 3.2775522073416195, 103.211)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 3751, 3.257073513942201, 3.2775522073416195, 106.359)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 3839, 3.2592484613231765, 3.2775522073416195, 109.358)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 3923, 3.2608698585466325, 3.2775522073416195, 112.635)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 4013, 3.263300692084618, 3.2775522073416195, 115.794)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 4095, 3.265363775869654, 3.2775522073416195, 119.042)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 4163, 3.2683102477617845, 3.2775522073416195, 122.051)
(status, bnb_model.incumbent) = ("Optimal", 3.2775160745510488)
