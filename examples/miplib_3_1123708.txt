
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (3, 120, "integer")
seed = 3
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.19201826771085584, Inf, 2.765)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 2.1284435957443035, Inf, 3.924)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 20.891627959482026, Inf, 5.45)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 23.274189019574063, Inf, 7.329)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 24.797536418579778, Inf, 9.164)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1195, 26.39707301934879, 65.07674221184006, 11.037)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1389, 27.53212921696212, 65.07674221184006, 12.908)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1567, 28.618265929332534, 65.07674221184006, 14.506)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1745, 29.831075485358046, 65.07674221184006, 16.247)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1923, 30.740459448461596, 65.07674221184006, 17.935)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 2083, 31.632781498616897, 65.07674221184006, 19.553)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2227, 32.35348039622568, 65.07674221184006, 21.079)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2375, 33.02773700896439, 65.07674221184006, 22.706)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2523, 33.51246037677966, 65.07674221184006, 24.298)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2663, 33.93020195341769, 65.07674221184006, 25.871)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2801, 34.46520808215541, 65.07674221184006, 27.363)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2947, 35.06994953524818, 65.07674221184006, 28.84)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3075, 35.53931083848924, 65.07674221184006, 30.258)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3215, 35.986200813458204, 65.07674221184006, 31.754)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3355, 36.54121621144506, 65.07674221184006, 33.275)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3473, 36.96322757405421, 65.07674221184006, 34.673)
build optimizer
