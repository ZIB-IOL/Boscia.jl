
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, M, k, var_A) = (8, 20, 1.0, 20.0, 1)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 193, 0.6397379414551535, 0.6742899115074988, 29.597)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 379, 0.6397597148306484, 0.6714450664655064, 60.211)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 541, 0.6397837926361276, 0.670774306245221, 90.552)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 715, 0.6397932001031806, 0.670774306245221, 121.233)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 891, 0.639799788736098, 0.670774306245221, 152.004)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1055, 0.6398097143369389, 0.670774306245221, 182.328)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1221, 0.6398183390690354, 0.670774306245221, 213.245)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1377, 0.6398258141567291, 0.670774306245221, 243.51)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1543, 0.6398322727977365, 0.670774306245221, 273.844)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1707, 0.6398383806162008, 0.670774306245221, 304.415)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1875, 0.6398444297659555, 0.670774306245221, 335.047)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2045, 0.6398477968990999, 0.670774306245221, 365.842)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2213, 0.6398505513474576, 0.670774306245221, 396.655)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2389, 0.6398526066072106, 0.670774306245221, 428.935)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2567, 0.6398551860200532, 0.670774306245221, 460.412)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2745, 0.6398569166175861, 0.670774306245221, 491.481)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2927, 0.6398582575012072, 0.670774306245221, 522.725)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3103, 0.6398601050384343, 0.6702502026401844, 554.167)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3279, 0.6398622847794919, 0.6702502026401844, 585.574)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3455, 0.6398636989996156, 0.6702502026401844, 617.042)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3635, 0.6398657252519889, 0.6702502026401844, 648.691)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3813, 0.6398677263209327, 0.6702445956884683, 679.692)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3995, 0.6398700846098319, 0.6702445956884683, 710.97)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 4167, 0.6398719721539659, 0.6702445956884683, 741.968)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 4325, 0.6398752100820739, 0.6702445956884683, 772.458)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 4497, 0.639876986772123, 0.6702445956884683, 803.633)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 4655, 0.6398794136152757, 0.6702445956884683, 833.914)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 4825, 0.6398815227467706, 0.6702445956884683, 864.97)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2900, 4979, 0.6398837723248222, 0.6702445956884683, 895.059)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3000, 5127, 0.63988610727101, 0.6702445956884683, 925.01)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3100, 5287, 0.6398878510107741, 0.6702445956884683, 955.568)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3200, 5443, 0.6398898714397668, 0.6702445956884683, 985.853)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3300, 5611, 0.6398914880343887, 0.6702445956884683, 1016.751)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3400, 5773, 0.639893130999753, 0.6702445956884683, 1047.239)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3500, 5937, 0.6398952032125484, 0.6702445956884683, 1077.923)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3600, 6093, 0.6398966063307836, 0.6702445956884683, 1107.949)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3700, 6253, 0.6398985963569365, 0.6701054911985038, 1138.431)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3800, 6405, 0.6398999783012784, 0.6701054911985038, 1168.171)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (3900, 6561, 0.6399018055054359, 0.6701054911985038, 1198.312)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4000, 6735, 0.6399028026722545, 0.6701054911985038, 1229.608)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4100, 6899, 0.6399042781860845, 0.6701054911985038, 1260.086)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4200, 7065, 0.6399056206037653, 0.6701054911985038, 1290.924)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4300, 7227, 0.6399071105144306, 0.6701054911985038, 1321.509)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4400, 7395, 0.6399082389369372, 0.6701054911985038, 1352.258)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4500, 7561, 0.6399092644702579, 0.6701054911985038, 1383.055)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4600, 7727, 0.639910205592311, 0.6701054911985038, 1413.413)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4700, 7899, 0.6399111025317522, 0.6701054911985038, 1444.541)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4800, 8067, 0.6399116774503602, 0.6701054911985038, 1475.323)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (4900, 8239, 0.6399124410365109, 0.6701054911985038, 1506.429)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5000, 8399, 0.6399137030245996, 0.6701054911985038, 1536.889)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5100, 8567, 0.6399143276143665, 0.6701054911985038, 1567.703)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5200, 8737, 0.639915110406569, 0.6701054911985038, 1598.705)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5300, 8903, 0.6399161829165992, 0.6701054911985038, 1629.602)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5400, 9075, 0.6399166797523355, 0.6701054911985038, 1660.639)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5500, 9245, 0.6399173348266213, 0.6701054911985038, 1691.496)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5600, 9417, 0.6399183721083496, 0.6701054911985038, 1722.547)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5700, 9589, 0.6399191067750988, 0.6701054911985038, 1753.515)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (5800, 9753, 0.6399202469115208, 0.6701054911985038, 1784.225)
