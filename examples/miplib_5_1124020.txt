
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension) = (5, 24)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, 5.256577039950709, Inf, 5.674)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 5.287718587923946, Inf, 10.166)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 5.318766525692815, Inf, 14.76)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 5.343950913095421, Inf, 19.295)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 1001, 5.364442765366487, Inf, 23.968)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1187, 5.3790182833406694, 5.6567567249755255, 28.502)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1307, 5.386610567342764, 5.601219324706914, 33.341)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1423, 5.4040409854580265, 5.601219324706914, 37.808)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1535, 5.411308074267251, 5.601219324706914, 42.355)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1641, 5.420561091121761, 5.601219324706914, 47.109)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1741, 5.429120015326972, 5.601219324706914, 51.651)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1847, 5.439483769451502, 5.601219324706914, 56.15)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 1949, 5.445236470929763, 5.601219324706914, 60.873)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2049, 5.4510860742868665, 5.601219324706914, 65.489)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2151, 5.457036815862794, 5.601219324706914, 70.232)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2251, 5.462827898776012, 5.601219324706914, 75.059)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2357, 5.465238125325483, 5.601219324706914, 79.912)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2459, 5.467988312525297, 5.601219324706914, 84.462)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2559, 5.473299590781497, 5.601219324706914, 88.967)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2659, 5.477669876948696, 5.601219324706914, 93.76)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 2759, 5.482056304085959, 5.601219324706914, 98.588)
(status, bnb_model.incumbent) = ("Optimal", 5.482102646590001)
