
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, ns) = (10, 70, 10.0)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 193, -149.07728403512422, -142.49615348526672, 73.269)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 373, -149.07615158647522, -142.63696980529977, 148.973)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 555, -149.07475334972543, -142.63696980529977, 226.24)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 739, -149.0734702919123, -142.63696980529977, 303.685)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 927, -149.07330921163398, -142.63696980529977, 381.26)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1107, -149.07262354125984, -142.63696980529977, 459.603)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1297, -149.07249772308674, -142.63696980529977, 535.935)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1465, -149.07205806501096, -142.63696980529977, 615.23)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1641, -149.07151422626077, -142.63696980529977, 693.439)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1803, -149.0710335473593, -142.63696980529977, 773.174)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1973, -149.07082789607904, -142.63696980529977, 851.946)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 2143, -149.07027879132966, -142.97203492610734, 931.014)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2311, -149.07000012640748, -142.97203492610734, 1009.935)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2479, -149.06946901715295, -142.97203492610734, 1089.838)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2651, -149.06915432577267, -142.97203492610734, 1169.656)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2833, -149.06880010424456, -142.97203492610734, 1248.54)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2983, -149.06831382361784, -142.97238773458756, 1330.024)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 3165, -149.06813174128848, -142.97238773458756, 1407.637)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 3325, -149.06791927695636, -143.14708183224738, 1486.752)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 3505, -149.06784193857277, -143.14708183224738, 1565.737)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3679, -149.06765256230892, -143.14708183224738, 1644.905)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3849, -149.0675016564701, -143.14708183224738, 1724.853)
