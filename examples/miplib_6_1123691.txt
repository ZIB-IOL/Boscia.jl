
******************************************************************************
This program contains Ipopt, a library for large-scale nonlinear optimization.
 Ipopt is released as open source code under the Eclipse Public License (EPL).
         For more information visit https://github.com/coin-or/Ipopt
******************************************************************************

(seed, dimension, mode) = (6, 110, "integer")
seed = 6
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (100, 201, -0.07402242387930436, Inf, 2.589)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (200, 401, 3.5009222195824767, Inf, 3.603)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (300, 601, 17.716123939394752, Inf, 5.194)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (400, 801, 20.543216511845863, Inf, 6.841)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (500, 957, 21.92811141591801, 50.18729780704556, 8.375)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (600, 1133, 23.48611108132592, 50.18729780704556, 10.032)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (700, 1277, 24.391729926271953, 50.18729780704556, 11.545)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (800, 1437, 25.05871135835466, 50.18729780704556, 13.133)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (900, 1585, 26.126886163959522, 50.18729780704556, 14.642)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1000, 1727, 27.037576280168746, 50.18729780704556, 16.173)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1100, 1863, 27.823121311847082, 50.18729780704556, 17.729)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1200, 1989, 28.54753565869505, 50.18729780704556, 19.154)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1300, 2113, 28.927224386276578, 50.18729780704556, 20.658)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1400, 2239, 29.647312834607963, 50.18729780704556, 22.147)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1500, 2363, 30.12571953656067, 50.18729780704556, 23.616)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1600, 2483, 30.67158195205091, 50.18729780704556, 25.049)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1700, 2613, 31.16534137372483, 50.18729780704556, 26.495)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1800, 2729, 31.667916865189532, 50.18729780704556, 27.905)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (1900, 2847, 32.18758273470332, 50.18729780704556, 29.3)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2000, 2959, 32.56324050701707, 50.18729780704556, 30.666)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2100, 3069, 32.902666613478075, 50.18729780704556, 32.113)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2200, 3181, 33.325716839181474, 50.18729780704556, 33.542)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2300, 3293, 33.717572439733, 50.18729780704556, 34.866)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2400, 3397, 34.09648602682755, 50.18729780704556, 36.291)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2500, 3503, 34.29321159655687, 50.18729780704556, 37.658)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2600, 3609, 34.47087505769926, 50.18729780704556, 39.084)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2700, 3715, 34.736058860797705, 50.18729780704556, 40.372)
(iteration, tree.num_nodes, tree.lb, tree.incumbent, time / 1000) = (2800, 3821, 34.949028378330574, 50.18729780704556, 41.76)
build optimizer
